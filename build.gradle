// https://github.com/ExampleDriven/spring-boot-thrift-example

System.properties.put("spring.config.location", "etc/application.yml")

buildscript {
	ext {
		//springBootVersion = '2.1.0.BUILD-SNAPSHOT'
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/release" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2" }
	}
	dependencies {
        classpath("io.franzbecker:gradle-lombok:1.13")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		//classpath("gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:0.4.0")
		classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.7")
	}
}


apply plugin: 'java'
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: "org.jruyi.thrift"
apply plugin: 'org.asciidoctor.convert'

group = 'ru.glosav.gais'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8


def slf4jVersion = "1.7.25"
def logbackVersion = "1.2.3"

bootJar {
    launchScript() {
        properties 'initInfoProvides': rootProject.name
    }
}


repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {

	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework:spring-jdbc')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	//compile('org.springframework.boot:spring-boot-starter-jta-atomikos')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-quartz')
    compile("io.dropwizard.metrics:metrics-core")
	//compile('org.springframework.restdocs:spring-restdocs-mockmvc')

	compile('org.springframework.retry:spring-retry')
    compile('org.apache.thrift:libthrift:0.10.0')
	compile('org.postgresql:postgresql:42.2.2')

    // Генерация документации REST-сервисов
    compile group: 'org.springframework.restdocs', name: 'spring-restdocs-core', version: "${springBootVersion}"
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'

    compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"

    // Groovy dependencies
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.13'

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    compileOnly('org.projectlombok:lombok:1.16.20')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')

    asciidoctor group: 'org.springframework.restdocs', name: 'spring-restdocs-asciidoctor', version: "${springBootVersion}"
    testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'


}

ext {
    title = 'Glosav Gais Gateway'
    organizationId = 'ru.glosav'
    organizationName = 'glosav.ru'
    organizationUrl = 'http://www.glosav.ru/'

    licenseName = 'Apache License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

    createdBy = "${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')})"

    snippetsDir = file('build/generated-snippets')
}

/*

compileThrift {
    thriftExecutable "thrift"
    sourceDir "src/main/thrift"
    outputDir "$buildDir/gen-src"

    nowarn true
    strict true
    verbose true
    recurse true
    debug true
    allowNegKeys true
    allow64bitsConsts true
    createGenFolder true

    generator 'java', 'private-members'
}
*/

asciidoctor {
    dependsOn test
    backends = ['html5']
    options doctype: 'book'

    attributes = [
            'source-highlighter': 'highlightjs',
            'imagesdir'         : './images',
            'toc'               : 'left',
            'toclevels'         : 3,
            'numbered'          : '',
            'icons'             : 'font',
            'setanchors'        : '',
            'idprefix'          : '',
            'idseparator'       : '-',
            'docinfo1'          : '',
            'safe-mode-unsafe'  : '',
            'allow-uri-read'    : '',
            'snippets'          : snippetsDir,
            linkattrs           : true,
            encoding            : 'utf-8'
    ]

    inputs.dir snippetsDir
    sourceDir 'src/main/asciidoc'
    // outputDir 'build/asciidoc'
    outputDir 'src/main/resources/static'
    //sources {
    //	include 'index.adoc'
    //}
}

jar {
    dependsOn asciidoctor

    manifest {
        attributes(
                'Specification-Title': title,
                'Specification-Version': version,
                'Specification-Vendor': organizationName,
                'Implementation-Title': title,
                'Implementation-Version': version,
                'Implementation-Vendor': organizationName,
                'Implementation-Vendor-Id': organizationId,
                'Implementation-Vendor-URL': organizationUrl,
                'Created-By': createdBy,
        )
    }

    from("${asciidoctor.outputDir}/html5") {
        include '**/index.html'
        include '**/images/*'
        into 'static/docs'
    }

}

uploadArchives {
    dependsOn 'clean'
    dependsOn 'build'
    tasks.findByName('build').mustRunAfter 'clean'
    repositories {
        mavenDeployer {
            addFilter('jar') { artifact, file ->
                println "Uploadling: ${artifact}, ${file}"
                return true
            }
            repository(
                    url: "${nexusUrl}/content/repo/glosav-release") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(
                    url: "${nexusUrl}/content/repo/glosav-snapshot") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}
