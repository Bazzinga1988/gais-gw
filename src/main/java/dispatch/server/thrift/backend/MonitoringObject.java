/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dispatch.server.thrift.backend;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-18")
public class MonitoringObject implements org.apache.thrift.TBase<MonitoringObject, MonitoringObject._Fields>, java.io.Serializable, Cloneable, Comparable<MonitoringObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonitoringObject");

  private static final org.apache.thrift.protocol.TField PARENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRACKER_FIELD_DESC = new org.apache.thrift.protocol.TField("tracker", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColor", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DISPLAY_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("displayIcon", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MonitoringObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MonitoringObjectTupleSchemeFactory();

  public java.lang.String parentGroupId; // required
  public java.lang.String id; // required
  public java.lang.String name; // required
  public Tracker tracker; // required
  public java.lang.String displayColor; // optional
  public java.lang.String displayIcon; // optional
  public AdditionalFields additionalFields; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_GROUP_ID((short)1, "parentGroupId"),
    ID((short)2, "id"),
    NAME((short)3, "name"),
    TRACKER((short)4, "tracker"),
    DISPLAY_COLOR((short)5, "displayColor"),
    DISPLAY_ICON((short)6, "displayIcon"),
    ADDITIONAL_FIELDS((short)7, "additionalFields");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_GROUP_ID
          return PARENT_GROUP_ID;
        case 2: // ID
          return ID;
        case 3: // NAME
          return NAME;
        case 4: // TRACKER
          return TRACKER;
        case 5: // DISPLAY_COLOR
          return DISPLAY_COLOR;
        case 6: // DISPLAY_ICON
          return DISPLAY_ICON;
        case 7: // ADDITIONAL_FIELDS
          return ADDITIONAL_FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DISPLAY_COLOR,_Fields.DISPLAY_ICON,_Fields.ADDITIONAL_FIELDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKER, new org.apache.thrift.meta_data.FieldMetaData("tracker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tracker.class)));
    tmpMap.put(_Fields.DISPLAY_COLOR, new org.apache.thrift.meta_data.FieldMetaData("displayColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_ICON, new org.apache.thrift.meta_data.FieldMetaData("displayIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDITIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("additionalFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalFields.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonitoringObject.class, metaDataMap);
  }

  public MonitoringObject() {
  }

  public MonitoringObject(
    java.lang.String parentGroupId,
    java.lang.String id,
    java.lang.String name,
    Tracker tracker)
  {
    this();
    this.parentGroupId = parentGroupId;
    this.id = id;
    this.name = name;
    this.tracker = tracker;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonitoringObject(MonitoringObject other) {
    if (other.isSetParentGroupId()) {
      this.parentGroupId = other.parentGroupId;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTracker()) {
      this.tracker = new Tracker(other.tracker);
    }
    if (other.isSetDisplayColor()) {
      this.displayColor = other.displayColor;
    }
    if (other.isSetDisplayIcon()) {
      this.displayIcon = other.displayIcon;
    }
    if (other.isSetAdditionalFields()) {
      this.additionalFields = new AdditionalFields(other.additionalFields);
    }
  }

  public MonitoringObject deepCopy() {
    return new MonitoringObject(this);
  }

  @Override
  public void clear() {
    this.parentGroupId = null;
    this.id = null;
    this.name = null;
    this.tracker = null;
    this.displayColor = null;
    this.displayIcon = null;
    this.additionalFields = null;
  }

  public java.lang.String getParentGroupId() {
    return this.parentGroupId;
  }

  public MonitoringObject setParentGroupId(java.lang.String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

  public void unsetParentGroupId() {
    this.parentGroupId = null;
  }

  /** Returns true if field parentGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentGroupId() {
    return this.parentGroupId != null;
  }

  public void setParentGroupIdIsSet(boolean value) {
    if (!value) {
      this.parentGroupId = null;
    }
  }

  public java.lang.String getId() {
    return this.id;
  }

  public MonitoringObject setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public MonitoringObject setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public Tracker getTracker() {
    return this.tracker;
  }

  public MonitoringObject setTracker(Tracker tracker) {
    this.tracker = tracker;
    return this;
  }

  public void unsetTracker() {
    this.tracker = null;
  }

  /** Returns true if field tracker is set (has been assigned a value) and false otherwise */
  public boolean isSetTracker() {
    return this.tracker != null;
  }

  public void setTrackerIsSet(boolean value) {
    if (!value) {
      this.tracker = null;
    }
  }

  public java.lang.String getDisplayColor() {
    return this.displayColor;
  }

  public MonitoringObject setDisplayColor(java.lang.String displayColor) {
    this.displayColor = displayColor;
    return this;
  }

  public void unsetDisplayColor() {
    this.displayColor = null;
  }

  /** Returns true if field displayColor is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayColor() {
    return this.displayColor != null;
  }

  public void setDisplayColorIsSet(boolean value) {
    if (!value) {
      this.displayColor = null;
    }
  }

  public java.lang.String getDisplayIcon() {
    return this.displayIcon;
  }

  public MonitoringObject setDisplayIcon(java.lang.String displayIcon) {
    this.displayIcon = displayIcon;
    return this;
  }

  public void unsetDisplayIcon() {
    this.displayIcon = null;
  }

  /** Returns true if field displayIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayIcon() {
    return this.displayIcon != null;
  }

  public void setDisplayIconIsSet(boolean value) {
    if (!value) {
      this.displayIcon = null;
    }
  }

  public AdditionalFields getAdditionalFields() {
    return this.additionalFields;
  }

  public MonitoringObject setAdditionalFields(AdditionalFields additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  public void unsetAdditionalFields() {
    this.additionalFields = null;
  }

  /** Returns true if field additionalFields is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionalFields() {
    return this.additionalFields != null;
  }

  public void setAdditionalFieldsIsSet(boolean value) {
    if (!value) {
      this.additionalFields = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PARENT_GROUP_ID:
      if (value == null) {
        unsetParentGroupId();
      } else {
        setParentGroupId((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TRACKER:
      if (value == null) {
        unsetTracker();
      } else {
        setTracker((Tracker)value);
      }
      break;

    case DISPLAY_COLOR:
      if (value == null) {
        unsetDisplayColor();
      } else {
        setDisplayColor((java.lang.String)value);
      }
      break;

    case DISPLAY_ICON:
      if (value == null) {
        unsetDisplayIcon();
      } else {
        setDisplayIcon((java.lang.String)value);
      }
      break;

    case ADDITIONAL_FIELDS:
      if (value == null) {
        unsetAdditionalFields();
      } else {
        setAdditionalFields((AdditionalFields)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_GROUP_ID:
      return getParentGroupId();

    case ID:
      return getId();

    case NAME:
      return getName();

    case TRACKER:
      return getTracker();

    case DISPLAY_COLOR:
      return getDisplayColor();

    case DISPLAY_ICON:
      return getDisplayIcon();

    case ADDITIONAL_FIELDS:
      return getAdditionalFields();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARENT_GROUP_ID:
      return isSetParentGroupId();
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TRACKER:
      return isSetTracker();
    case DISPLAY_COLOR:
      return isSetDisplayColor();
    case DISPLAY_ICON:
      return isSetDisplayIcon();
    case ADDITIONAL_FIELDS:
      return isSetAdditionalFields();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MonitoringObject)
      return this.equals((MonitoringObject)that);
    return false;
  }

  public boolean equals(MonitoringObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parentGroupId = true && this.isSetParentGroupId();
    boolean that_present_parentGroupId = true && that.isSetParentGroupId();
    if (this_present_parentGroupId || that_present_parentGroupId) {
      if (!(this_present_parentGroupId && that_present_parentGroupId))
        return false;
      if (!this.parentGroupId.equals(that.parentGroupId))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_tracker = true && this.isSetTracker();
    boolean that_present_tracker = true && that.isSetTracker();
    if (this_present_tracker || that_present_tracker) {
      if (!(this_present_tracker && that_present_tracker))
        return false;
      if (!this.tracker.equals(that.tracker))
        return false;
    }

    boolean this_present_displayColor = true && this.isSetDisplayColor();
    boolean that_present_displayColor = true && that.isSetDisplayColor();
    if (this_present_displayColor || that_present_displayColor) {
      if (!(this_present_displayColor && that_present_displayColor))
        return false;
      if (!this.displayColor.equals(that.displayColor))
        return false;
    }

    boolean this_present_displayIcon = true && this.isSetDisplayIcon();
    boolean that_present_displayIcon = true && that.isSetDisplayIcon();
    if (this_present_displayIcon || that_present_displayIcon) {
      if (!(this_present_displayIcon && that_present_displayIcon))
        return false;
      if (!this.displayIcon.equals(that.displayIcon))
        return false;
    }

    boolean this_present_additionalFields = true && this.isSetAdditionalFields();
    boolean that_present_additionalFields = true && that.isSetAdditionalFields();
    if (this_present_additionalFields || that_present_additionalFields) {
      if (!(this_present_additionalFields && that_present_additionalFields))
        return false;
      if (!this.additionalFields.equals(that.additionalFields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParentGroupId()) ? 131071 : 524287);
    if (isSetParentGroupId())
      hashCode = hashCode * 8191 + parentGroupId.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTracker()) ? 131071 : 524287);
    if (isSetTracker())
      hashCode = hashCode * 8191 + tracker.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayColor()) ? 131071 : 524287);
    if (isSetDisplayColor())
      hashCode = hashCode * 8191 + displayColor.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayIcon()) ? 131071 : 524287);
    if (isSetDisplayIcon())
      hashCode = hashCode * 8191 + displayIcon.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdditionalFields()) ? 131071 : 524287);
    if (isSetAdditionalFields())
      hashCode = hashCode * 8191 + additionalFields.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MonitoringObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetParentGroupId()).compareTo(other.isSetParentGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentGroupId, other.parentGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTracker()).compareTo(other.isSetTracker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracker, other.tracker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayColor()).compareTo(other.isSetDisplayColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColor, other.displayColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayIcon()).compareTo(other.isSetDisplayIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayIcon, other.displayIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdditionalFields()).compareTo(other.isSetAdditionalFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionalFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalFields, other.additionalFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MonitoringObject(");
    boolean first = true;

    sb.append("parentGroupId:");
    if (this.parentGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tracker:");
    if (this.tracker == null) {
      sb.append("null");
    } else {
      sb.append(this.tracker);
    }
    first = false;
    if (isSetDisplayColor()) {
      if (!first) sb.append(", ");
      sb.append("displayColor:");
      if (this.displayColor == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColor);
      }
      first = false;
    }
    if (isSetDisplayIcon()) {
      if (!first) sb.append(", ");
      sb.append("displayIcon:");
      if (this.displayIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.displayIcon);
      }
      first = false;
    }
    if (isSetAdditionalFields()) {
      if (!first) sb.append(", ");
      sb.append("additionalFields:");
      if (this.additionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalFields);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tracker != null) {
      tracker.validate();
    }
    if (additionalFields != null) {
      additionalFields.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MonitoringObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MonitoringObjectStandardScheme getScheme() {
      return new MonitoringObjectStandardScheme();
    }
  }

  private static class MonitoringObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<MonitoringObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MonitoringObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentGroupId = iprot.readString();
              struct.setParentGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tracker = new Tracker();
              struct.tracker.read(iprot);
              struct.setTrackerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayColor = iprot.readString();
              struct.setDisplayColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISPLAY_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayIcon = iprot.readString();
              struct.setDisplayIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADDITIONAL_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.additionalFields = new AdditionalFields();
              struct.additionalFields.read(iprot);
              struct.setAdditionalFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MonitoringObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parentGroupId != null) {
        oprot.writeFieldBegin(PARENT_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.parentGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.tracker != null) {
        oprot.writeFieldBegin(TRACKER_FIELD_DESC);
        struct.tracker.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.displayColor != null) {
        if (struct.isSetDisplayColor()) {
          oprot.writeFieldBegin(DISPLAY_COLOR_FIELD_DESC);
          oprot.writeString(struct.displayColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.displayIcon != null) {
        if (struct.isSetDisplayIcon()) {
          oprot.writeFieldBegin(DISPLAY_ICON_FIELD_DESC);
          oprot.writeString(struct.displayIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.additionalFields != null) {
        if (struct.isSetAdditionalFields()) {
          oprot.writeFieldBegin(ADDITIONAL_FIELDS_FIELD_DESC);
          struct.additionalFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MonitoringObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MonitoringObjectTupleScheme getScheme() {
      return new MonitoringObjectTupleScheme();
    }
  }

  private static class MonitoringObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<MonitoringObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MonitoringObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParentGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetTracker()) {
        optionals.set(3);
      }
      if (struct.isSetDisplayColor()) {
        optionals.set(4);
      }
      if (struct.isSetDisplayIcon()) {
        optionals.set(5);
      }
      if (struct.isSetAdditionalFields()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetParentGroupId()) {
        oprot.writeString(struct.parentGroupId);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTracker()) {
        struct.tracker.write(oprot);
      }
      if (struct.isSetDisplayColor()) {
        oprot.writeString(struct.displayColor);
      }
      if (struct.isSetDisplayIcon()) {
        oprot.writeString(struct.displayIcon);
      }
      if (struct.isSetAdditionalFields()) {
        struct.additionalFields.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MonitoringObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.parentGroupId = iprot.readString();
        struct.setParentGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tracker = new Tracker();
        struct.tracker.read(iprot);
        struct.setTrackerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.displayColor = iprot.readString();
        struct.setDisplayColorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.displayIcon = iprot.readString();
        struct.setDisplayIconIsSet(true);
      }
      if (incoming.get(6)) {
        struct.additionalFields = new AdditionalFields();
        struct.additionalFields.read(iprot);
        struct.setAdditionalFieldsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

