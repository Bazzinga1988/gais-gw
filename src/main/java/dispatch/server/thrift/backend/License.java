/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dispatch.server.thrift.backend;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-18")
public class License implements org.apache.thrift.TBase<License, License._Fields>, java.io.Serializable, Cloneable, Comparable<License> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("License");

  private static final org.apache.thrift.protocol.TField EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("expire", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MONITORING_OBJECTS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("monitoringObjectsLimit", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USERS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("usersLimit", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SMS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("smsLimit", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LicenseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LicenseTupleSchemeFactory();

  public long expire; // optional
  public int monitoringObjectsLimit; // optional
  public int usersLimit; // optional
  public int smsLimit; // optional
  public boolean enabled; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPIRE((short)1, "expire"),
    MONITORING_OBJECTS_LIMIT((short)2, "monitoringObjectsLimit"),
    USERS_LIMIT((short)3, "usersLimit"),
    SMS_LIMIT((short)4, "smsLimit"),
    ENABLED((short)5, "enabled");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPIRE
          return EXPIRE;
        case 2: // MONITORING_OBJECTS_LIMIT
          return MONITORING_OBJECTS_LIMIT;
        case 3: // USERS_LIMIT
          return USERS_LIMIT;
        case 4: // SMS_LIMIT
          return SMS_LIMIT;
        case 5: // ENABLED
          return ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRE_ISSET_ID = 0;
  private static final int __MONITORINGOBJECTSLIMIT_ISSET_ID = 1;
  private static final int __USERSLIMIT_ISSET_ID = 2;
  private static final int __SMSLIMIT_ISSET_ID = 3;
  private static final int __ENABLED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXPIRE,_Fields.MONITORING_OBJECTS_LIMIT,_Fields.USERS_LIMIT,_Fields.SMS_LIMIT,_Fields.ENABLED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("expire", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MONITORING_OBJECTS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("monitoringObjectsLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("usersLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SMS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("smsLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(License.class, metaDataMap);
  }

  public License() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public License(License other) {
    __isset_bitfield = other.__isset_bitfield;
    this.expire = other.expire;
    this.monitoringObjectsLimit = other.monitoringObjectsLimit;
    this.usersLimit = other.usersLimit;
    this.smsLimit = other.smsLimit;
    this.enabled = other.enabled;
  }

  public License deepCopy() {
    return new License(this);
  }

  @Override
  public void clear() {
    setExpireIsSet(false);
    this.expire = 0;
    setMonitoringObjectsLimitIsSet(false);
    this.monitoringObjectsLimit = 0;
    setUsersLimitIsSet(false);
    this.usersLimit = 0;
    setSmsLimitIsSet(false);
    this.smsLimit = 0;
    setEnabledIsSet(false);
    this.enabled = false;
  }

  public long getExpire() {
    return this.expire;
  }

  public License setExpire(long expire) {
    this.expire = expire;
    setExpireIsSet(true);
    return this;
  }

  public void unsetExpire() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRE_ISSET_ID);
  }

  /** Returns true if field expire is set (has been assigned a value) and false otherwise */
  public boolean isSetExpire() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRE_ISSET_ID);
  }

  public void setExpireIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRE_ISSET_ID, value);
  }

  public int getMonitoringObjectsLimit() {
    return this.monitoringObjectsLimit;
  }

  public License setMonitoringObjectsLimit(int monitoringObjectsLimit) {
    this.monitoringObjectsLimit = monitoringObjectsLimit;
    setMonitoringObjectsLimitIsSet(true);
    return this;
  }

  public void unsetMonitoringObjectsLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONITORINGOBJECTSLIMIT_ISSET_ID);
  }

  /** Returns true if field monitoringObjectsLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitoringObjectsLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONITORINGOBJECTSLIMIT_ISSET_ID);
  }

  public void setMonitoringObjectsLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONITORINGOBJECTSLIMIT_ISSET_ID, value);
  }

  public int getUsersLimit() {
    return this.usersLimit;
  }

  public License setUsersLimit(int usersLimit) {
    this.usersLimit = usersLimit;
    setUsersLimitIsSet(true);
    return this;
  }

  public void unsetUsersLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERSLIMIT_ISSET_ID);
  }

  /** Returns true if field usersLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetUsersLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERSLIMIT_ISSET_ID);
  }

  public void setUsersLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERSLIMIT_ISSET_ID, value);
  }

  public int getSmsLimit() {
    return this.smsLimit;
  }

  public License setSmsLimit(int smsLimit) {
    this.smsLimit = smsLimit;
    setSmsLimitIsSet(true);
    return this;
  }

  public void unsetSmsLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SMSLIMIT_ISSET_ID);
  }

  /** Returns true if field smsLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetSmsLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SMSLIMIT_ISSET_ID);
  }

  public void setSmsLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SMSLIMIT_ISSET_ID, value);
  }

  public boolean isEnabled() {
    return this.enabled;
  }

  public License setEnabled(boolean enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EXPIRE:
      if (value == null) {
        unsetExpire();
      } else {
        setExpire((java.lang.Long)value);
      }
      break;

    case MONITORING_OBJECTS_LIMIT:
      if (value == null) {
        unsetMonitoringObjectsLimit();
      } else {
        setMonitoringObjectsLimit((java.lang.Integer)value);
      }
      break;

    case USERS_LIMIT:
      if (value == null) {
        unsetUsersLimit();
      } else {
        setUsersLimit((java.lang.Integer)value);
      }
      break;

    case SMS_LIMIT:
      if (value == null) {
        unsetSmsLimit();
      } else {
        setSmsLimit((java.lang.Integer)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPIRE:
      return getExpire();

    case MONITORING_OBJECTS_LIMIT:
      return getMonitoringObjectsLimit();

    case USERS_LIMIT:
      return getUsersLimit();

    case SMS_LIMIT:
      return getSmsLimit();

    case ENABLED:
      return isEnabled();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXPIRE:
      return isSetExpire();
    case MONITORING_OBJECTS_LIMIT:
      return isSetMonitoringObjectsLimit();
    case USERS_LIMIT:
      return isSetUsersLimit();
    case SMS_LIMIT:
      return isSetSmsLimit();
    case ENABLED:
      return isSetEnabled();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof License)
      return this.equals((License)that);
    return false;
  }

  public boolean equals(License that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_expire = true && this.isSetExpire();
    boolean that_present_expire = true && that.isSetExpire();
    if (this_present_expire || that_present_expire) {
      if (!(this_present_expire && that_present_expire))
        return false;
      if (this.expire != that.expire)
        return false;
    }

    boolean this_present_monitoringObjectsLimit = true && this.isSetMonitoringObjectsLimit();
    boolean that_present_monitoringObjectsLimit = true && that.isSetMonitoringObjectsLimit();
    if (this_present_monitoringObjectsLimit || that_present_monitoringObjectsLimit) {
      if (!(this_present_monitoringObjectsLimit && that_present_monitoringObjectsLimit))
        return false;
      if (this.monitoringObjectsLimit != that.monitoringObjectsLimit)
        return false;
    }

    boolean this_present_usersLimit = true && this.isSetUsersLimit();
    boolean that_present_usersLimit = true && that.isSetUsersLimit();
    if (this_present_usersLimit || that_present_usersLimit) {
      if (!(this_present_usersLimit && that_present_usersLimit))
        return false;
      if (this.usersLimit != that.usersLimit)
        return false;
    }

    boolean this_present_smsLimit = true && this.isSetSmsLimit();
    boolean that_present_smsLimit = true && that.isSetSmsLimit();
    if (this_present_smsLimit || that_present_smsLimit) {
      if (!(this_present_smsLimit && that_present_smsLimit))
        return false;
      if (this.smsLimit != that.smsLimit)
        return false;
    }

    boolean this_present_enabled = true && this.isSetEnabled();
    boolean that_present_enabled = true && that.isSetEnabled();
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExpire()) ? 131071 : 524287);
    if (isSetExpire())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expire);

    hashCode = hashCode * 8191 + ((isSetMonitoringObjectsLimit()) ? 131071 : 524287);
    if (isSetMonitoringObjectsLimit())
      hashCode = hashCode * 8191 + monitoringObjectsLimit;

    hashCode = hashCode * 8191 + ((isSetUsersLimit()) ? 131071 : 524287);
    if (isSetUsersLimit())
      hashCode = hashCode * 8191 + usersLimit;

    hashCode = hashCode * 8191 + ((isSetSmsLimit()) ? 131071 : 524287);
    if (isSetSmsLimit())
      hashCode = hashCode * 8191 + smsLimit;

    hashCode = hashCode * 8191 + ((isSetEnabled()) ? 131071 : 524287);
    if (isSetEnabled())
      hashCode = hashCode * 8191 + ((enabled) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(License other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExpire()).compareTo(other.isSetExpire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expire, other.expire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMonitoringObjectsLimit()).compareTo(other.isSetMonitoringObjectsLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitoringObjectsLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitoringObjectsLimit, other.monitoringObjectsLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsersLimit()).compareTo(other.isSetUsersLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsersLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usersLimit, other.usersLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmsLimit()).compareTo(other.isSetSmsLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmsLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsLimit, other.smsLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("License(");
    boolean first = true;

    if (isSetExpire()) {
      sb.append("expire:");
      sb.append(this.expire);
      first = false;
    }
    if (isSetMonitoringObjectsLimit()) {
      if (!first) sb.append(", ");
      sb.append("monitoringObjectsLimit:");
      sb.append(this.monitoringObjectsLimit);
      first = false;
    }
    if (isSetUsersLimit()) {
      if (!first) sb.append(", ");
      sb.append("usersLimit:");
      sb.append(this.usersLimit);
      first = false;
    }
    if (isSetSmsLimit()) {
      if (!first) sb.append(", ");
      sb.append("smsLimit:");
      sb.append(this.smsLimit);
      first = false;
    }
    if (isSetEnabled()) {
      if (!first) sb.append(", ");
      sb.append("enabled:");
      sb.append(this.enabled);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LicenseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LicenseStandardScheme getScheme() {
      return new LicenseStandardScheme();
    }
  }

  private static class LicenseStandardScheme extends org.apache.thrift.scheme.StandardScheme<License> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, License struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expire = iprot.readI64();
              struct.setExpireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONITORING_OBJECTS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monitoringObjectsLimit = iprot.readI32();
              struct.setMonitoringObjectsLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usersLimit = iprot.readI32();
              struct.setUsersLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SMS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smsLimit = iprot.readI32();
              struct.setSmsLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enabled = iprot.readBool();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, License struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExpire()) {
        oprot.writeFieldBegin(EXPIRE_FIELD_DESC);
        oprot.writeI64(struct.expire);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMonitoringObjectsLimit()) {
        oprot.writeFieldBegin(MONITORING_OBJECTS_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.monitoringObjectsLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsersLimit()) {
        oprot.writeFieldBegin(USERS_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.usersLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSmsLimit()) {
        oprot.writeFieldBegin(SMS_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.smsLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnabled()) {
        oprot.writeFieldBegin(ENABLED_FIELD_DESC);
        oprot.writeBool(struct.enabled);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LicenseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LicenseTupleScheme getScheme() {
      return new LicenseTupleScheme();
    }
  }

  private static class LicenseTupleScheme extends org.apache.thrift.scheme.TupleScheme<License> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, License struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExpire()) {
        optionals.set(0);
      }
      if (struct.isSetMonitoringObjectsLimit()) {
        optionals.set(1);
      }
      if (struct.isSetUsersLimit()) {
        optionals.set(2);
      }
      if (struct.isSetSmsLimit()) {
        optionals.set(3);
      }
      if (struct.isSetEnabled()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExpire()) {
        oprot.writeI64(struct.expire);
      }
      if (struct.isSetMonitoringObjectsLimit()) {
        oprot.writeI32(struct.monitoringObjectsLimit);
      }
      if (struct.isSetUsersLimit()) {
        oprot.writeI32(struct.usersLimit);
      }
      if (struct.isSetSmsLimit()) {
        oprot.writeI32(struct.smsLimit);
      }
      if (struct.isSetEnabled()) {
        oprot.writeBool(struct.enabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, License struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.expire = iprot.readI64();
        struct.setExpireIsSet(true);
      }
      if (incoming.get(1)) {
        struct.monitoringObjectsLimit = iprot.readI32();
        struct.setMonitoringObjectsLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.usersLimit = iprot.readI32();
        struct.setUsersLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.smsLimit = iprot.readI32();
        struct.setSmsLimitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.enabled = iprot.readBool();
        struct.setEnabledIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

