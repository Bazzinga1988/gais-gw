/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dispatch.server.thrift.backend;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-18")
public class DispatchBackend {

  public interface Iface {

    public Session login(java.lang.String userLoginName, java.lang.String password, boolean longSession) throws BadRequest, Busy, InternalServerError, AccessDenied, UserLicenseExpired, TrialIsNotActivated, LoginFailed, org.apache.thrift.TException;

    public void logout(Session session) throws BadRequest, Busy, InternalServerError, org.apache.thrift.TException;

    public java.util.List<Group> getRootGroups(Session session) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, org.apache.thrift.TException;

    public java.util.List<Group> getChildrenGroups(Session session, java.lang.String parentGroupId, boolean recursive) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException;

    public Group createCompanyWithAdditionalFields(Session session, java.lang.String parentGroupId, java.lang.String title, License license, AdditionalFields additionalFields) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException;

    public void editGroup(Session session, Group data) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException;

    public java.util.List<MonitoringObject> getChildrenMonitoringObjects(Session session, java.lang.String parentGroupId, boolean recursive) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException;

    public MonitoringObject createMonitoringObjectWithAdditionalFields(Session session, java.lang.String parentGroupId, Tracker tracker, java.lang.String name, java.lang.String displayColor, java.lang.String displayIcon, AdditionalFields additionalFields) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException;

    public void editMonitoringObject(Session session, MonitoringObject data) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void login(java.lang.String userLoginName, java.lang.String password, boolean longSession, org.apache.thrift.async.AsyncMethodCallback<Session> resultHandler) throws org.apache.thrift.TException;

    public void logout(Session session, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getRootGroups(Session session, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler) throws org.apache.thrift.TException;

    public void getChildrenGroups(Session session, java.lang.String parentGroupId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler) throws org.apache.thrift.TException;

    public void createCompanyWithAdditionalFields(Session session, java.lang.String parentGroupId, java.lang.String title, License license, AdditionalFields additionalFields, org.apache.thrift.async.AsyncMethodCallback<Group> resultHandler) throws org.apache.thrift.TException;

    public void editGroup(Session session, Group data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getChildrenMonitoringObjects(Session session, java.lang.String parentGroupId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonitoringObject>> resultHandler) throws org.apache.thrift.TException;

    public void createMonitoringObjectWithAdditionalFields(Session session, java.lang.String parentGroupId, Tracker tracker, java.lang.String name, java.lang.String displayColor, java.lang.String displayIcon, AdditionalFields additionalFields, org.apache.thrift.async.AsyncMethodCallback<MonitoringObject> resultHandler) throws org.apache.thrift.TException;

    public void editMonitoringObject(Session session, MonitoringObject data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Session login(java.lang.String userLoginName, java.lang.String password, boolean longSession) throws BadRequest, Busy, InternalServerError, AccessDenied, UserLicenseExpired, TrialIsNotActivated, LoginFailed, org.apache.thrift.TException
    {
      send_login(userLoginName, password, longSession);
      return recv_login();
    }

    public void send_login(java.lang.String userLoginName, java.lang.String password, boolean longSession) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setUserLoginName(userLoginName);
      args.setPassword(password);
      args.setLongSession(longSession);
      sendBase("login", args);
    }

    public Session recv_login() throws BadRequest, Busy, InternalServerError, AccessDenied, UserLicenseExpired, TrialIsNotActivated, LoginFailed, org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ade != null) {
        throw result.ade;
      }
      if (result.ule != null) {
        throw result.ule;
      }
      if (result.tne != null) {
        throw result.tne;
      }
      if (result.lfe != null) {
        throw result.lfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public void logout(Session session) throws BadRequest, Busy, InternalServerError, org.apache.thrift.TException
    {
      send_logout(session);
      recv_logout();
    }

    public void send_logout(Session session) throws org.apache.thrift.TException
    {
      logout_args args = new logout_args();
      args.setSession(session);
      sendBase("logout", args);
    }

    public void recv_logout() throws BadRequest, Busy, InternalServerError, org.apache.thrift.TException
    {
      logout_result result = new logout_result();
      receiveBase(result, "logout");
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      return;
    }

    public java.util.List<Group> getRootGroups(Session session) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, org.apache.thrift.TException
    {
      send_getRootGroups(session);
      return recv_getRootGroups();
    }

    public void send_getRootGroups(Session session) throws org.apache.thrift.TException
    {
      getRootGroups_args args = new getRootGroups_args();
      args.setSession(session);
      sendBase("getRootGroups", args);
    }

    public java.util.List<Group> recv_getRootGroups() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, org.apache.thrift.TException
    {
      getRootGroups_result result = new getRootGroups_result();
      receiveBase(result, "getRootGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ad != null) {
        throw result.ad;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRootGroups failed: unknown result");
    }

    public java.util.List<Group> getChildrenGroups(Session session, java.lang.String parentGroupId, boolean recursive) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      send_getChildrenGroups(session, parentGroupId, recursive);
      return recv_getChildrenGroups();
    }

    public void send_getChildrenGroups(Session session, java.lang.String parentGroupId, boolean recursive) throws org.apache.thrift.TException
    {
      getChildrenGroups_args args = new getChildrenGroups_args();
      args.setSession(session);
      args.setParentGroupId(parentGroupId);
      args.setRecursive(recursive);
      sendBase("getChildrenGroups", args);
    }

    public java.util.List<Group> recv_getChildrenGroups() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      getChildrenGroups_result result = new getChildrenGroups_result();
      receiveBase(result, "getChildrenGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ad != null) {
        throw result.ad;
      }
      if (result.one != null) {
        throw result.one;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChildrenGroups failed: unknown result");
    }

    public Group createCompanyWithAdditionalFields(Session session, java.lang.String parentGroupId, java.lang.String title, License license, AdditionalFields additionalFields) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      send_createCompanyWithAdditionalFields(session, parentGroupId, title, license, additionalFields);
      return recv_createCompanyWithAdditionalFields();
    }

    public void send_createCompanyWithAdditionalFields(Session session, java.lang.String parentGroupId, java.lang.String title, License license, AdditionalFields additionalFields) throws org.apache.thrift.TException
    {
      createCompanyWithAdditionalFields_args args = new createCompanyWithAdditionalFields_args();
      args.setSession(session);
      args.setParentGroupId(parentGroupId);
      args.setTitle(title);
      args.setLicense(license);
      args.setAdditionalFields(additionalFields);
      sendBase("createCompanyWithAdditionalFields", args);
    }

    public Group recv_createCompanyWithAdditionalFields() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      createCompanyWithAdditionalFields_result result = new createCompanyWithAdditionalFields_result();
      receiveBase(result, "createCompanyWithAdditionalFields");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ad != null) {
        throw result.ad;
      }
      if (result.one != null) {
        throw result.one;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCompanyWithAdditionalFields failed: unknown result");
    }

    public void editGroup(Session session, Group data) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      send_editGroup(session, data);
      recv_editGroup();
    }

    public void send_editGroup(Session session, Group data) throws org.apache.thrift.TException
    {
      editGroup_args args = new editGroup_args();
      args.setSession(session);
      args.setData(data);
      sendBase("editGroup", args);
    }

    public void recv_editGroup() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      editGroup_result result = new editGroup_result();
      receiveBase(result, "editGroup");
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ade != null) {
        throw result.ade;
      }
      if (result.one != null) {
        throw result.one;
      }
      return;
    }

    public java.util.List<MonitoringObject> getChildrenMonitoringObjects(Session session, java.lang.String parentGroupId, boolean recursive) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      send_getChildrenMonitoringObjects(session, parentGroupId, recursive);
      return recv_getChildrenMonitoringObjects();
    }

    public void send_getChildrenMonitoringObjects(Session session, java.lang.String parentGroupId, boolean recursive) throws org.apache.thrift.TException
    {
      getChildrenMonitoringObjects_args args = new getChildrenMonitoringObjects_args();
      args.setSession(session);
      args.setParentGroupId(parentGroupId);
      args.setRecursive(recursive);
      sendBase("getChildrenMonitoringObjects", args);
    }

    public java.util.List<MonitoringObject> recv_getChildrenMonitoringObjects() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      getChildrenMonitoringObjects_result result = new getChildrenMonitoringObjects_result();
      receiveBase(result, "getChildrenMonitoringObjects");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ad != null) {
        throw result.ad;
      }
      if (result.one != null) {
        throw result.one;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getChildrenMonitoringObjects failed: unknown result");
    }

    public MonitoringObject createMonitoringObjectWithAdditionalFields(Session session, java.lang.String parentGroupId, Tracker tracker, java.lang.String name, java.lang.String displayColor, java.lang.String displayIcon, AdditionalFields additionalFields) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      send_createMonitoringObjectWithAdditionalFields(session, parentGroupId, tracker, name, displayColor, displayIcon, additionalFields);
      return recv_createMonitoringObjectWithAdditionalFields();
    }

    public void send_createMonitoringObjectWithAdditionalFields(Session session, java.lang.String parentGroupId, Tracker tracker, java.lang.String name, java.lang.String displayColor, java.lang.String displayIcon, AdditionalFields additionalFields) throws org.apache.thrift.TException
    {
      createMonitoringObjectWithAdditionalFields_args args = new createMonitoringObjectWithAdditionalFields_args();
      args.setSession(session);
      args.setParentGroupId(parentGroupId);
      args.setTracker(tracker);
      args.setName(name);
      args.setDisplayColor(displayColor);
      args.setDisplayIcon(displayIcon);
      args.setAdditionalFields(additionalFields);
      sendBase("createMonitoringObjectWithAdditionalFields", args);
    }

    public MonitoringObject recv_createMonitoringObjectWithAdditionalFields() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      createMonitoringObjectWithAdditionalFields_result result = new createMonitoringObjectWithAdditionalFields_result();
      receiveBase(result, "createMonitoringObjectWithAdditionalFields");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ad != null) {
        throw result.ad;
      }
      if (result.one != null) {
        throw result.one;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMonitoringObjectWithAdditionalFields failed: unknown result");
    }

    public void editMonitoringObject(Session session, MonitoringObject data) throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      send_editMonitoringObject(session, data);
      recv_editMonitoringObject();
    }

    public void send_editMonitoringObject(Session session, MonitoringObject data) throws org.apache.thrift.TException
    {
      editMonitoringObject_args args = new editMonitoringObject_args();
      args.setSession(session);
      args.setData(data);
      sendBase("editMonitoringObject", args);
    }

    public void recv_editMonitoringObject() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException
    {
      editMonitoringObject_result result = new editMonitoringObject_result();
      receiveBase(result, "editMonitoringObject");
      if (result.bre != null) {
        throw result.bre;
      }
      if (result.bse != null) {
        throw result.bse;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.ade != null) {
        throw result.ade;
      }
      if (result.one != null) {
        throw result.one;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void login(java.lang.String userLoginName, java.lang.String password, boolean longSession, org.apache.thrift.async.AsyncMethodCallback<Session> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(userLoginName, password, longSession, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall<Session> {
      private java.lang.String userLoginName;
      private java.lang.String password;
      private boolean longSession;
      public login_call(java.lang.String userLoginName, java.lang.String password, boolean longSession, org.apache.thrift.async.AsyncMethodCallback<Session> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userLoginName = userLoginName;
        this.password = password;
        this.longSession = longSession;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setUserLoginName(userLoginName);
        args.setPassword(password);
        args.setLongSession(longSession);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Session getResult() throws BadRequest, Busy, InternalServerError, AccessDenied, UserLicenseExpired, TrialIsNotActivated, LoginFailed, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void logout(Session session, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logout_call method_call = new logout_call(session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Session session;
      public logout_call(Session session, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws BadRequest, Busy, InternalServerError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getRootGroups(Session session, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRootGroups_call method_call = new getRootGroups_call(session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRootGroups_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Group>> {
      private Session session;
      public getRootGroups_call(Session session, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRootGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRootGroups_args args = new getRootGroups_args();
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Group> getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRootGroups();
      }
    }

    public void getChildrenGroups(Session session, java.lang.String parentGroupId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChildrenGroups_call method_call = new getChildrenGroups_call(session, parentGroupId, recursive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChildrenGroups_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Group>> {
      private Session session;
      private java.lang.String parentGroupId;
      private boolean recursive;
      public getChildrenGroups_call(Session session, java.lang.String parentGroupId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.parentGroupId = parentGroupId;
        this.recursive = recursive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChildrenGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChildrenGroups_args args = new getChildrenGroups_args();
        args.setSession(session);
        args.setParentGroupId(parentGroupId);
        args.setRecursive(recursive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Group> getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChildrenGroups();
      }
    }

    public void createCompanyWithAdditionalFields(Session session, java.lang.String parentGroupId, java.lang.String title, License license, AdditionalFields additionalFields, org.apache.thrift.async.AsyncMethodCallback<Group> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCompanyWithAdditionalFields_call method_call = new createCompanyWithAdditionalFields_call(session, parentGroupId, title, license, additionalFields, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCompanyWithAdditionalFields_call extends org.apache.thrift.async.TAsyncMethodCall<Group> {
      private Session session;
      private java.lang.String parentGroupId;
      private java.lang.String title;
      private License license;
      private AdditionalFields additionalFields;
      public createCompanyWithAdditionalFields_call(Session session, java.lang.String parentGroupId, java.lang.String title, License license, AdditionalFields additionalFields, org.apache.thrift.async.AsyncMethodCallback<Group> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.parentGroupId = parentGroupId;
        this.title = title;
        this.license = license;
        this.additionalFields = additionalFields;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCompanyWithAdditionalFields", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCompanyWithAdditionalFields_args args = new createCompanyWithAdditionalFields_args();
        args.setSession(session);
        args.setParentGroupId(parentGroupId);
        args.setTitle(title);
        args.setLicense(license);
        args.setAdditionalFields(additionalFields);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Group getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCompanyWithAdditionalFields();
      }
    }

    public void editGroup(Session session, Group data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editGroup_call method_call = new editGroup_call(session, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editGroup_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Session session;
      private Group data;
      public editGroup_call(Session session, Group data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editGroup_args args = new editGroup_args();
        args.setSession(session);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getChildrenMonitoringObjects(Session session, java.lang.String parentGroupId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonitoringObject>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getChildrenMonitoringObjects_call method_call = new getChildrenMonitoringObjects_call(session, parentGroupId, recursive, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getChildrenMonitoringObjects_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MonitoringObject>> {
      private Session session;
      private java.lang.String parentGroupId;
      private boolean recursive;
      public getChildrenMonitoringObjects_call(Session session, java.lang.String parentGroupId, boolean recursive, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonitoringObject>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.parentGroupId = parentGroupId;
        this.recursive = recursive;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getChildrenMonitoringObjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getChildrenMonitoringObjects_args args = new getChildrenMonitoringObjects_args();
        args.setSession(session);
        args.setParentGroupId(parentGroupId);
        args.setRecursive(recursive);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MonitoringObject> getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getChildrenMonitoringObjects();
      }
    }

    public void createMonitoringObjectWithAdditionalFields(Session session, java.lang.String parentGroupId, Tracker tracker, java.lang.String name, java.lang.String displayColor, java.lang.String displayIcon, AdditionalFields additionalFields, org.apache.thrift.async.AsyncMethodCallback<MonitoringObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMonitoringObjectWithAdditionalFields_call method_call = new createMonitoringObjectWithAdditionalFields_call(session, parentGroupId, tracker, name, displayColor, displayIcon, additionalFields, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMonitoringObjectWithAdditionalFields_call extends org.apache.thrift.async.TAsyncMethodCall<MonitoringObject> {
      private Session session;
      private java.lang.String parentGroupId;
      private Tracker tracker;
      private java.lang.String name;
      private java.lang.String displayColor;
      private java.lang.String displayIcon;
      private AdditionalFields additionalFields;
      public createMonitoringObjectWithAdditionalFields_call(Session session, java.lang.String parentGroupId, Tracker tracker, java.lang.String name, java.lang.String displayColor, java.lang.String displayIcon, AdditionalFields additionalFields, org.apache.thrift.async.AsyncMethodCallback<MonitoringObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.parentGroupId = parentGroupId;
        this.tracker = tracker;
        this.name = name;
        this.displayColor = displayColor;
        this.displayIcon = displayIcon;
        this.additionalFields = additionalFields;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMonitoringObjectWithAdditionalFields", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMonitoringObjectWithAdditionalFields_args args = new createMonitoringObjectWithAdditionalFields_args();
        args.setSession(session);
        args.setParentGroupId(parentGroupId);
        args.setTracker(tracker);
        args.setName(name);
        args.setDisplayColor(displayColor);
        args.setDisplayIcon(displayIcon);
        args.setAdditionalFields(additionalFields);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MonitoringObject getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMonitoringObjectWithAdditionalFields();
      }
    }

    public void editMonitoringObject(Session session, MonitoringObject data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editMonitoringObject_call method_call = new editMonitoringObject_call(session, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editMonitoringObject_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Session session;
      private MonitoringObject data;
      public editMonitoringObject_call(Session session, MonitoringObject data, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editMonitoringObject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editMonitoringObject_args args = new editMonitoringObject_args();
        args.setSession(session);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws BadRequest, Busy, InternalServerError, Unauthorized, AccessDenied, ObjectNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("getRootGroups", new getRootGroups());
      processMap.put("getChildrenGroups", new getChildrenGroups());
      processMap.put("createCompanyWithAdditionalFields", new createCompanyWithAdditionalFields());
      processMap.put("editGroup", new editGroup());
      processMap.put("getChildrenMonitoringObjects", new getChildrenMonitoringObjects());
      processMap.put("createMonitoringObjectWithAdditionalFields", new createMonitoringObjectWithAdditionalFields());
      processMap.put("editMonitoringObject", new editMonitoringObject());
      return processMap;
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        try {
          result.success = iface.login(args.userLoginName, args.password, args.longSession);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (AccessDenied ade) {
          result.ade = ade;
        } catch (UserLicenseExpired ule) {
          result.ule = ule;
        } catch (TrialIsNotActivated tne) {
          result.tne = tne;
        } catch (LoginFailed lfe) {
          result.lfe = lfe;
        }
        return result;
      }
    }

    public static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
        logout_result result = new logout_result();
        try {
          iface.logout(args.session);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class getRootGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRootGroups_args> {
      public getRootGroups() {
        super("getRootGroups");
      }

      public getRootGroups_args getEmptyArgsInstance() {
        return new getRootGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRootGroups_result getResult(I iface, getRootGroups_args args) throws org.apache.thrift.TException {
        getRootGroups_result result = new getRootGroups_result();
        try {
          result.success = iface.getRootGroups(args.session);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ad) {
          result.ad = ad;
        }
        return result;
      }
    }

    public static class getChildrenGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChildrenGroups_args> {
      public getChildrenGroups() {
        super("getChildrenGroups");
      }

      public getChildrenGroups_args getEmptyArgsInstance() {
        return new getChildrenGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChildrenGroups_result getResult(I iface, getChildrenGroups_args args) throws org.apache.thrift.TException {
        getChildrenGroups_result result = new getChildrenGroups_result();
        try {
          result.success = iface.getChildrenGroups(args.session, args.parentGroupId, args.recursive);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ad) {
          result.ad = ad;
        } catch (ObjectNotFound one) {
          result.one = one;
        }
        return result;
      }
    }

    public static class createCompanyWithAdditionalFields<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCompanyWithAdditionalFields_args> {
      public createCompanyWithAdditionalFields() {
        super("createCompanyWithAdditionalFields");
      }

      public createCompanyWithAdditionalFields_args getEmptyArgsInstance() {
        return new createCompanyWithAdditionalFields_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCompanyWithAdditionalFields_result getResult(I iface, createCompanyWithAdditionalFields_args args) throws org.apache.thrift.TException {
        createCompanyWithAdditionalFields_result result = new createCompanyWithAdditionalFields_result();
        try {
          result.success = iface.createCompanyWithAdditionalFields(args.session, args.parentGroupId, args.title, args.license, args.additionalFields);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ad) {
          result.ad = ad;
        } catch (ObjectNotFound one) {
          result.one = one;
        }
        return result;
      }
    }

    public static class editGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editGroup_args> {
      public editGroup() {
        super("editGroup");
      }

      public editGroup_args getEmptyArgsInstance() {
        return new editGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editGroup_result getResult(I iface, editGroup_args args) throws org.apache.thrift.TException {
        editGroup_result result = new editGroup_result();
        try {
          iface.editGroup(args.session, args.data);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ade) {
          result.ade = ade;
        } catch (ObjectNotFound one) {
          result.one = one;
        }
        return result;
      }
    }

    public static class getChildrenMonitoringObjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getChildrenMonitoringObjects_args> {
      public getChildrenMonitoringObjects() {
        super("getChildrenMonitoringObjects");
      }

      public getChildrenMonitoringObjects_args getEmptyArgsInstance() {
        return new getChildrenMonitoringObjects_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getChildrenMonitoringObjects_result getResult(I iface, getChildrenMonitoringObjects_args args) throws org.apache.thrift.TException {
        getChildrenMonitoringObjects_result result = new getChildrenMonitoringObjects_result();
        try {
          result.success = iface.getChildrenMonitoringObjects(args.session, args.parentGroupId, args.recursive);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ad) {
          result.ad = ad;
        } catch (ObjectNotFound one) {
          result.one = one;
        }
        return result;
      }
    }

    public static class createMonitoringObjectWithAdditionalFields<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMonitoringObjectWithAdditionalFields_args> {
      public createMonitoringObjectWithAdditionalFields() {
        super("createMonitoringObjectWithAdditionalFields");
      }

      public createMonitoringObjectWithAdditionalFields_args getEmptyArgsInstance() {
        return new createMonitoringObjectWithAdditionalFields_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMonitoringObjectWithAdditionalFields_result getResult(I iface, createMonitoringObjectWithAdditionalFields_args args) throws org.apache.thrift.TException {
        createMonitoringObjectWithAdditionalFields_result result = new createMonitoringObjectWithAdditionalFields_result();
        try {
          result.success = iface.createMonitoringObjectWithAdditionalFields(args.session, args.parentGroupId, args.tracker, args.name, args.displayColor, args.displayIcon, args.additionalFields);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ad) {
          result.ad = ad;
        } catch (ObjectNotFound one) {
          result.one = one;
        }
        return result;
      }
    }

    public static class editMonitoringObject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editMonitoringObject_args> {
      public editMonitoringObject() {
        super("editMonitoringObject");
      }

      public editMonitoringObject_args getEmptyArgsInstance() {
        return new editMonitoringObject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editMonitoringObject_result getResult(I iface, editMonitoringObject_args args) throws org.apache.thrift.TException {
        editMonitoringObject_result result = new editMonitoringObject_result();
        try {
          iface.editMonitoringObject(args.session, args.data);
        } catch (BadRequest bre) {
          result.bre = bre;
        } catch (Busy bse) {
          result.bse = bse;
        } catch (InternalServerError ise) {
          result.ise = ise;
        } catch (Unauthorized ue) {
          result.ue = ue;
        } catch (AccessDenied ade) {
          result.ade = ade;
        } catch (ObjectNotFound one) {
          result.one = one;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("login", new login());
      processMap.put("logout", new logout());
      processMap.put("getRootGroups", new getRootGroups());
      processMap.put("getChildrenGroups", new getChildrenGroups());
      processMap.put("createCompanyWithAdditionalFields", new createCompanyWithAdditionalFields());
      processMap.put("editGroup", new editGroup());
      processMap.put("getChildrenMonitoringObjects", new getChildrenMonitoringObjects());
      processMap.put("createMonitoringObjectWithAdditionalFields", new createMonitoringObjectWithAdditionalFields());
      processMap.put("editMonitoringObject", new editMonitoringObject());
      return processMap;
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, Session> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Session> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Session>() { 
          public void onComplete(Session o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            login_result result = new login_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ade = (AccessDenied) e;
              result.setAdeIsSet(true);
              msg = result;
            } else if (e instanceof UserLicenseExpired) {
              result.ule = (UserLicenseExpired) e;
              result.setUleIsSet(true);
              msg = result;
            } else if (e instanceof TrialIsNotActivated) {
              result.tne = (TrialIsNotActivated) e;
              result.setTneIsSet(true);
              msg = result;
            } else if (e instanceof LoginFailed) {
              result.lfe = (LoginFailed) e;
              result.setLfeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<Session> resultHandler) throws org.apache.thrift.TException {
        iface.login(args.userLoginName, args.password, args.longSession,resultHandler);
      }
    }

    public static class logout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logout_args, Void> {
      public logout() {
        super("logout");
      }

      public logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logout_result result = new logout_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logout_result result = new logout_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logout(args.session,resultHandler);
      }
    }

    public static class getRootGroups<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRootGroups_args, java.util.List<Group>> {
      public getRootGroups() {
        super("getRootGroups");
      }

      public getRootGroups_args getEmptyArgsInstance() {
        return new getRootGroups_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>>() { 
          public void onComplete(java.util.List<Group> o) {
            getRootGroups_result result = new getRootGroups_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRootGroups_result result = new getRootGroups_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ad = (AccessDenied) e;
              result.setAdIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRootGroups_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler) throws org.apache.thrift.TException {
        iface.getRootGroups(args.session,resultHandler);
      }
    }

    public static class getChildrenGroups<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChildrenGroups_args, java.util.List<Group>> {
      public getChildrenGroups() {
        super("getChildrenGroups");
      }

      public getChildrenGroups_args getEmptyArgsInstance() {
        return new getChildrenGroups_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>>() { 
          public void onComplete(java.util.List<Group> o) {
            getChildrenGroups_result result = new getChildrenGroups_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getChildrenGroups_result result = new getChildrenGroups_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ad = (AccessDenied) e;
              result.setAdIsSet(true);
              msg = result;
            } else if (e instanceof ObjectNotFound) {
              result.one = (ObjectNotFound) e;
              result.setOneIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChildrenGroups_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Group>> resultHandler) throws org.apache.thrift.TException {
        iface.getChildrenGroups(args.session, args.parentGroupId, args.recursive,resultHandler);
      }
    }

    public static class createCompanyWithAdditionalFields<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCompanyWithAdditionalFields_args, Group> {
      public createCompanyWithAdditionalFields() {
        super("createCompanyWithAdditionalFields");
      }

      public createCompanyWithAdditionalFields_args getEmptyArgsInstance() {
        return new createCompanyWithAdditionalFields_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Group> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Group>() { 
          public void onComplete(Group o) {
            createCompanyWithAdditionalFields_result result = new createCompanyWithAdditionalFields_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createCompanyWithAdditionalFields_result result = new createCompanyWithAdditionalFields_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ad = (AccessDenied) e;
              result.setAdIsSet(true);
              msg = result;
            } else if (e instanceof ObjectNotFound) {
              result.one = (ObjectNotFound) e;
              result.setOneIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCompanyWithAdditionalFields_args args, org.apache.thrift.async.AsyncMethodCallback<Group> resultHandler) throws org.apache.thrift.TException {
        iface.createCompanyWithAdditionalFields(args.session, args.parentGroupId, args.title, args.license, args.additionalFields,resultHandler);
      }
    }

    public static class editGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editGroup_args, Void> {
      public editGroup() {
        super("editGroup");
      }

      public editGroup_args getEmptyArgsInstance() {
        return new editGroup_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            editGroup_result result = new editGroup_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            editGroup_result result = new editGroup_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ade = (AccessDenied) e;
              result.setAdeIsSet(true);
              msg = result;
            } else if (e instanceof ObjectNotFound) {
              result.one = (ObjectNotFound) e;
              result.setOneIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.editGroup(args.session, args.data,resultHandler);
      }
    }

    public static class getChildrenMonitoringObjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getChildrenMonitoringObjects_args, java.util.List<MonitoringObject>> {
      public getChildrenMonitoringObjects() {
        super("getChildrenMonitoringObjects");
      }

      public getChildrenMonitoringObjects_args getEmptyArgsInstance() {
        return new getChildrenMonitoringObjects_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonitoringObject>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonitoringObject>>() { 
          public void onComplete(java.util.List<MonitoringObject> o) {
            getChildrenMonitoringObjects_result result = new getChildrenMonitoringObjects_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getChildrenMonitoringObjects_result result = new getChildrenMonitoringObjects_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ad = (AccessDenied) e;
              result.setAdIsSet(true);
              msg = result;
            } else if (e instanceof ObjectNotFound) {
              result.one = (ObjectNotFound) e;
              result.setOneIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getChildrenMonitoringObjects_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonitoringObject>> resultHandler) throws org.apache.thrift.TException {
        iface.getChildrenMonitoringObjects(args.session, args.parentGroupId, args.recursive,resultHandler);
      }
    }

    public static class createMonitoringObjectWithAdditionalFields<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMonitoringObjectWithAdditionalFields_args, MonitoringObject> {
      public createMonitoringObjectWithAdditionalFields() {
        super("createMonitoringObjectWithAdditionalFields");
      }

      public createMonitoringObjectWithAdditionalFields_args getEmptyArgsInstance() {
        return new createMonitoringObjectWithAdditionalFields_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MonitoringObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MonitoringObject>() { 
          public void onComplete(MonitoringObject o) {
            createMonitoringObjectWithAdditionalFields_result result = new createMonitoringObjectWithAdditionalFields_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createMonitoringObjectWithAdditionalFields_result result = new createMonitoringObjectWithAdditionalFields_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ad = (AccessDenied) e;
              result.setAdIsSet(true);
              msg = result;
            } else if (e instanceof ObjectNotFound) {
              result.one = (ObjectNotFound) e;
              result.setOneIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMonitoringObjectWithAdditionalFields_args args, org.apache.thrift.async.AsyncMethodCallback<MonitoringObject> resultHandler) throws org.apache.thrift.TException {
        iface.createMonitoringObjectWithAdditionalFields(args.session, args.parentGroupId, args.tracker, args.name, args.displayColor, args.displayIcon, args.additionalFields,resultHandler);
      }
    }

    public static class editMonitoringObject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editMonitoringObject_args, Void> {
      public editMonitoringObject() {
        super("editMonitoringObject");
      }

      public editMonitoringObject_args getEmptyArgsInstance() {
        return new editMonitoringObject_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            editMonitoringObject_result result = new editMonitoringObject_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            editMonitoringObject_result result = new editMonitoringObject_result();
            if (e instanceof BadRequest) {
              result.bre = (BadRequest) e;
              result.setBreIsSet(true);
              msg = result;
            } else if (e instanceof Busy) {
              result.bse = (Busy) e;
              result.setBseIsSet(true);
              msg = result;
            } else if (e instanceof InternalServerError) {
              result.ise = (InternalServerError) e;
              result.setIseIsSet(true);
              msg = result;
            } else if (e instanceof Unauthorized) {
              result.ue = (Unauthorized) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof AccessDenied) {
              result.ade = (AccessDenied) e;
              result.setAdeIsSet(true);
              msg = result;
            } else if (e instanceof ObjectNotFound) {
              result.one = (ObjectNotFound) e;
              result.setOneIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editMonitoringObject_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.editMonitoringObject(args.session, args.data,resultHandler);
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField USER_LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userLoginName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LONG_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("longSession", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_argsTupleSchemeFactory();

    public java.lang.String userLoginName; // required
    public java.lang.String password; // required
    public boolean longSession; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_LOGIN_NAME((short)1, "userLoginName"),
      PASSWORD((short)2, "password"),
      LONG_SESSION((short)3, "longSession");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_LOGIN_NAME
            return USER_LOGIN_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // LONG_SESSION
            return LONG_SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LONGSESSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("userLoginName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LONG_SESSION, new org.apache.thrift.meta_data.FieldMetaData("longSession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      java.lang.String userLoginName,
      java.lang.String password,
      boolean longSession)
    {
      this();
      this.userLoginName = userLoginName;
      this.password = password;
      this.longSession = longSession;
      setLongSessionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserLoginName()) {
        this.userLoginName = other.userLoginName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.longSession = other.longSession;
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.userLoginName = null;
      this.password = null;
      setLongSessionIsSet(false);
      this.longSession = false;
    }

    public java.lang.String getUserLoginName() {
      return this.userLoginName;
    }

    public login_args setUserLoginName(java.lang.String userLoginName) {
      this.userLoginName = userLoginName;
      return this;
    }

    public void unsetUserLoginName() {
      this.userLoginName = null;
    }

    /** Returns true if field userLoginName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserLoginName() {
      return this.userLoginName != null;
    }

    public void setUserLoginNameIsSet(boolean value) {
      if (!value) {
        this.userLoginName = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public login_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean isLongSession() {
      return this.longSession;
    }

    public login_args setLongSession(boolean longSession) {
      this.longSession = longSession;
      setLongSessionIsSet(true);
      return this;
    }

    public void unsetLongSession() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONGSESSION_ISSET_ID);
    }

    /** Returns true if field longSession is set (has been assigned a value) and false otherwise */
    public boolean isSetLongSession() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONGSESSION_ISSET_ID);
    }

    public void setLongSessionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONGSESSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_LOGIN_NAME:
        if (value == null) {
          unsetUserLoginName();
        } else {
          setUserLoginName((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case LONG_SESSION:
        if (value == null) {
          unsetLongSession();
        } else {
          setLongSession((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_LOGIN_NAME:
        return getUserLoginName();

      case PASSWORD:
        return getPassword();

      case LONG_SESSION:
        return isLongSession();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_LOGIN_NAME:
        return isSetUserLoginName();
      case PASSWORD:
        return isSetPassword();
      case LONG_SESSION:
        return isSetLongSession();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userLoginName = true && this.isSetUserLoginName();
      boolean that_present_userLoginName = true && that.isSetUserLoginName();
      if (this_present_userLoginName || that_present_userLoginName) {
        if (!(this_present_userLoginName && that_present_userLoginName))
          return false;
        if (!this.userLoginName.equals(that.userLoginName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_longSession = true;
      boolean that_present_longSession = true;
      if (this_present_longSession || that_present_longSession) {
        if (!(this_present_longSession && that_present_longSession))
          return false;
        if (this.longSession != that.longSession)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserLoginName()) ? 131071 : 524287);
      if (isSetUserLoginName())
        hashCode = hashCode * 8191 + userLoginName.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((longSession) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserLoginName()).compareTo(other.isSetUserLoginName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserLoginName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLoginName, other.userLoginName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLongSession()).compareTo(other.isSetLongSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longSession, other.longSession);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_args(");
      boolean first = true;

      sb.append("userLoginName:");
      if (this.userLoginName == null) {
        sb.append("null");
      } else {
        sb.append(this.userLoginName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longSession:");
      sb.append(this.longSession);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_LOGIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userLoginName = iprot.readString();
                struct.setUserLoginNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LONG_SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.longSession = iprot.readBool();
                struct.setLongSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userLoginName != null) {
          oprot.writeFieldBegin(USER_LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.userLoginName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LONG_SESSION_FIELD_DESC);
        oprot.writeBool(struct.longSession);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserLoginName()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetLongSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserLoginName()) {
          oprot.writeString(struct.userLoginName);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetLongSession()) {
          oprot.writeBool(struct.longSession);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userLoginName = iprot.readString();
          struct.setUserLoginNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.longSession = iprot.readBool();
          struct.setLongSessionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ade", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ULE_FIELD_DESC = new org.apache.thrift.protocol.TField("ule", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TNE_FIELD_DESC = new org.apache.thrift.protocol.TField("tne", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField LFE_FIELD_DESC = new org.apache.thrift.protocol.TField("lfe", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_resultTupleSchemeFactory();

    public Session success; // required
    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public AccessDenied ade; // required
    public UserLicenseExpired ule; // required
    public TrialIsNotActivated tne; // required
    public LoginFailed lfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      ADE((short)4, "ade"),
      ULE((short)5, "ule"),
      TNE((short)6, "tne"),
      LFE((short)7, "lfe");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // ADE
            return ADE;
          case 5: // ULE
            return ULE;
          case 6: // TNE
            return TNE;
          case 7: // LFE
            return LFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.ADE, new org.apache.thrift.meta_data.FieldMetaData("ade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ULE, new org.apache.thrift.meta_data.FieldMetaData("ule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserLicenseExpired.class)));
      tmpMap.put(_Fields.TNE, new org.apache.thrift.meta_data.FieldMetaData("tne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrialIsNotActivated.class)));
      tmpMap.put(_Fields.LFE, new org.apache.thrift.meta_data.FieldMetaData("lfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginFailed.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      Session success,
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      AccessDenied ade,
      UserLicenseExpired ule,
      TrialIsNotActivated tne,
      LoginFailed lfe)
    {
      this();
      this.success = success;
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ade = ade;
      this.ule = ule;
      this.tne = tne;
      this.lfe = lfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new Session(other.success);
      }
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetAde()) {
        this.ade = new AccessDenied(other.ade);
      }
      if (other.isSetUle()) {
        this.ule = new UserLicenseExpired(other.ule);
      }
      if (other.isSetTne()) {
        this.tne = new TrialIsNotActivated(other.tne);
      }
      if (other.isSetLfe()) {
        this.lfe = new LoginFailed(other.lfe);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ade = null;
      this.ule = null;
      this.tne = null;
      this.lfe = null;
    }

    public Session getSuccess() {
      return this.success;
    }

    public login_result setSuccess(Session success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public login_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public login_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public login_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public AccessDenied getAde() {
      return this.ade;
    }

    public login_result setAde(AccessDenied ade) {
      this.ade = ade;
      return this;
    }

    public void unsetAde() {
      this.ade = null;
    }

    /** Returns true if field ade is set (has been assigned a value) and false otherwise */
    public boolean isSetAde() {
      return this.ade != null;
    }

    public void setAdeIsSet(boolean value) {
      if (!value) {
        this.ade = null;
      }
    }

    public UserLicenseExpired getUle() {
      return this.ule;
    }

    public login_result setUle(UserLicenseExpired ule) {
      this.ule = ule;
      return this;
    }

    public void unsetUle() {
      this.ule = null;
    }

    /** Returns true if field ule is set (has been assigned a value) and false otherwise */
    public boolean isSetUle() {
      return this.ule != null;
    }

    public void setUleIsSet(boolean value) {
      if (!value) {
        this.ule = null;
      }
    }

    public TrialIsNotActivated getTne() {
      return this.tne;
    }

    public login_result setTne(TrialIsNotActivated tne) {
      this.tne = tne;
      return this;
    }

    public void unsetTne() {
      this.tne = null;
    }

    /** Returns true if field tne is set (has been assigned a value) and false otherwise */
    public boolean isSetTne() {
      return this.tne != null;
    }

    public void setTneIsSet(boolean value) {
      if (!value) {
        this.tne = null;
      }
    }

    public LoginFailed getLfe() {
      return this.lfe;
    }

    public login_result setLfe(LoginFailed lfe) {
      this.lfe = lfe;
      return this;
    }

    public void unsetLfe() {
      this.lfe = null;
    }

    /** Returns true if field lfe is set (has been assigned a value) and false otherwise */
    public boolean isSetLfe() {
      return this.lfe != null;
    }

    public void setLfeIsSet(boolean value) {
      if (!value) {
        this.lfe = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Session)value);
        }
        break;

      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case ADE:
        if (value == null) {
          unsetAde();
        } else {
          setAde((AccessDenied)value);
        }
        break;

      case ULE:
        if (value == null) {
          unsetUle();
        } else {
          setUle((UserLicenseExpired)value);
        }
        break;

      case TNE:
        if (value == null) {
          unsetTne();
        } else {
          setTne((TrialIsNotActivated)value);
        }
        break;

      case LFE:
        if (value == null) {
          unsetLfe();
        } else {
          setLfe((LoginFailed)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case ADE:
        return getAde();

      case ULE:
        return getUle();

      case TNE:
        return getTne();

      case LFE:
        return getLfe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case ADE:
        return isSetAde();
      case ULE:
        return isSetUle();
      case TNE:
        return isSetTne();
      case LFE:
        return isSetLfe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ade = true && this.isSetAde();
      boolean that_present_ade = true && that.isSetAde();
      if (this_present_ade || that_present_ade) {
        if (!(this_present_ade && that_present_ade))
          return false;
        if (!this.ade.equals(that.ade))
          return false;
      }

      boolean this_present_ule = true && this.isSetUle();
      boolean that_present_ule = true && that.isSetUle();
      if (this_present_ule || that_present_ule) {
        if (!(this_present_ule && that_present_ule))
          return false;
        if (!this.ule.equals(that.ule))
          return false;
      }

      boolean this_present_tne = true && this.isSetTne();
      boolean that_present_tne = true && that.isSetTne();
      if (this_present_tne || that_present_tne) {
        if (!(this_present_tne && that_present_tne))
          return false;
        if (!this.tne.equals(that.tne))
          return false;
      }

      boolean this_present_lfe = true && this.isSetLfe();
      boolean that_present_lfe = true && that.isSetLfe();
      if (this_present_lfe || that_present_lfe) {
        if (!(this_present_lfe && that_present_lfe))
          return false;
        if (!this.lfe.equals(that.lfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetAde()) ? 131071 : 524287);
      if (isSetAde())
        hashCode = hashCode * 8191 + ade.hashCode();

      hashCode = hashCode * 8191 + ((isSetUle()) ? 131071 : 524287);
      if (isSetUle())
        hashCode = hashCode * 8191 + ule.hashCode();

      hashCode = hashCode * 8191 + ((isSetTne()) ? 131071 : 524287);
      if (isSetTne())
        hashCode = hashCode * 8191 + tne.hashCode();

      hashCode = hashCode * 8191 + ((isSetLfe()) ? 131071 : 524287);
      if (isSetLfe())
        hashCode = hashCode * 8191 + lfe.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAde()).compareTo(other.isSetAde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ade, other.ade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUle()).compareTo(other.isSetUle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ule, other.ule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTne()).compareTo(other.isSetTne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tne, other.tne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLfe()).compareTo(other.isSetLfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lfe, other.lfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ade:");
      if (this.ade == null) {
        sb.append("null");
      } else {
        sb.append(this.ade);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ule:");
      if (this.ule == null) {
        sb.append("null");
      } else {
        sb.append(this.ule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tne:");
      if (this.tne == null) {
        sb.append("null");
      } else {
        sb.append(this.tne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lfe:");
      if (this.lfe == null) {
        sb.append("null");
      } else {
        sb.append(this.lfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Session();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ADE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ade = new AccessDenied();
                struct.ade.read(iprot);
                struct.setAdeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ule = new UserLicenseExpired();
                struct.ule.read(iprot);
                struct.setUleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tne = new TrialIsNotActivated();
                struct.tne.read(iprot);
                struct.setTneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lfe = new LoginFailed();
                struct.lfe.read(iprot);
                struct.setLfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ade != null) {
          oprot.writeFieldBegin(ADE_FIELD_DESC);
          struct.ade.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ule != null) {
          oprot.writeFieldBegin(ULE_FIELD_DESC);
          struct.ule.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tne != null) {
          oprot.writeFieldBegin(TNE_FIELD_DESC);
          struct.tne.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lfe != null) {
          oprot.writeFieldBegin(LFE_FIELD_DESC);
          struct.lfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBre()) {
          optionals.set(1);
        }
        if (struct.isSetBse()) {
          optionals.set(2);
        }
        if (struct.isSetIse()) {
          optionals.set(3);
        }
        if (struct.isSetAde()) {
          optionals.set(4);
        }
        if (struct.isSetUle()) {
          optionals.set(5);
        }
        if (struct.isSetTne()) {
          optionals.set(6);
        }
        if (struct.isSetLfe()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetAde()) {
          struct.ade.write(oprot);
        }
        if (struct.isSetUle()) {
          struct.ule.write(oprot);
        }
        if (struct.isSetTne()) {
          struct.tne.write(oprot);
        }
        if (struct.isSetLfe()) {
          struct.lfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.success = new Session();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ade = new AccessDenied();
          struct.ade.read(iprot);
          struct.setAdeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ule = new UserLicenseExpired();
          struct.ule.read(iprot);
          struct.setUleIsSet(true);
        }
        if (incoming.get(6)) {
          struct.tne = new TrialIsNotActivated();
          struct.tne.read(iprot);
          struct.setTneIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lfe = new LoginFailed();
          struct.lfe.read(iprot);
          struct.setLfeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable, Comparable<logout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_argsTupleSchemeFactory();

    public Session session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
    }

    public logout_args() {
    }

    public logout_args(
      Session session)
    {
      this();
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
    }

    public Session getSession() {
      return this.session;
    }

    public logout_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsStandardScheme getScheme() {
        return new logout_argsStandardScheme();
      }
    }

    private static class logout_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_argsTupleScheme getScheme() {
        return new logout_argsTupleScheme();
      }
    }

    private static class logout_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable, Comparable<logout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");

    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logout_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logout_resultTupleSchemeFactory();

    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
    }

    public logout_result() {
    }

    public logout_result(
      BadRequest bre,
      Busy bse,
      InternalServerError ise)
    {
      this();
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    @Override
    public void clear() {
      this.bre = null;
      this.bse = null;
      this.ise = null;
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public logout_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public logout_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public logout_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logout_result(");
      boolean first = true;

      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultStandardScheme getScheme() {
        return new logout_resultStandardScheme();
      }
    }

    private static class logout_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logout_resultTupleScheme getScheme() {
        return new logout_resultTupleScheme();
      }
    }

    private static class logout_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBre()) {
          optionals.set(0);
        }
        if (struct.isSetBse()) {
          optionals.set(1);
        }
        if (struct.isSetIse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRootGroups_args implements org.apache.thrift.TBase<getRootGroups_args, getRootGroups_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRootGroups_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRootGroups_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRootGroups_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRootGroups_argsTupleSchemeFactory();

    public Session session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRootGroups_args.class, metaDataMap);
    }

    public getRootGroups_args() {
    }

    public getRootGroups_args(
      Session session)
    {
      this();
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRootGroups_args(getRootGroups_args other) {
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
    }

    public getRootGroups_args deepCopy() {
      return new getRootGroups_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
    }

    public Session getSession() {
      return this.session;
    }

    public getRootGroups_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRootGroups_args)
        return this.equals((getRootGroups_args)that);
      return false;
    }

    public boolean equals(getRootGroups_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRootGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRootGroups_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRootGroups_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootGroups_argsStandardScheme getScheme() {
        return new getRootGroups_argsStandardScheme();
      }
    }

    private static class getRootGroups_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRootGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRootGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRootGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRootGroups_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootGroups_argsTupleScheme getScheme() {
        return new getRootGroups_argsTupleScheme();
      }
    }

    private static class getRootGroups_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRootGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRootGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRootGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRootGroups_result implements org.apache.thrift.TBase<getRootGroups_result, getRootGroups_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRootGroups_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRootGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRootGroups_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRootGroups_resultTupleSchemeFactory();

    public java.util.List<Group> success; // required
    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ad; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      AD((short)5, "ad");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // AD
            return AD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Group.class))));
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRootGroups_result.class, metaDataMap);
    }

    public getRootGroups_result() {
    }

    public getRootGroups_result(
      java.util.List<Group> success,
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ad)
    {
      this();
      this.success = success;
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ad = ad;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRootGroups_result(getRootGroups_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Group> __this__success = new java.util.ArrayList<Group>(other.success.size());
        for (Group other_element : other.success) {
          __this__success.add(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAd()) {
        this.ad = new AccessDenied(other.ad);
      }
    }

    public getRootGroups_result deepCopy() {
      return new getRootGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ad = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Group> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Group>();
      }
      this.success.add(elem);
    }

    public java.util.List<Group> getSuccess() {
      return this.success;
    }

    public getRootGroups_result setSuccess(java.util.List<Group> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public getRootGroups_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public getRootGroups_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public getRootGroups_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public getRootGroups_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAd() {
      return this.ad;
    }

    public getRootGroups_result setAd(AccessDenied ad) {
      this.ad = ad;
      return this;
    }

    public void unsetAd() {
      this.ad = null;
    }

    /** Returns true if field ad is set (has been assigned a value) and false otherwise */
    public boolean isSetAd() {
      return this.ad != null;
    }

    public void setAdIsSet(boolean value) {
      if (!value) {
        this.ad = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Group>)value);
        }
        break;

      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case AD:
        if (value == null) {
          unsetAd();
        } else {
          setAd((AccessDenied)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case AD:
        return getAd();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case AD:
        return isSetAd();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRootGroups_result)
        return this.equals((getRootGroups_result)that);
      return false;
    }

    public boolean equals(getRootGroups_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ad = true && this.isSetAd();
      boolean that_present_ad = true && that.isSetAd();
      if (this_present_ad || that_present_ad) {
        if (!(this_present_ad && that_present_ad))
          return false;
        if (!this.ad.equals(that.ad))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAd()) ? 131071 : 524287);
      if (isSetAd())
        hashCode = hashCode * 8191 + ad.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRootGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRootGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ad:");
      if (this.ad == null) {
        sb.append("null");
      } else {
        sb.append(this.ad);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRootGroups_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootGroups_resultStandardScheme getScheme() {
        return new getRootGroups_resultStandardScheme();
      }
    }

    private static class getRootGroups_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRootGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRootGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Group>(_list16.size);
                  Group _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Group();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ad = new AccessDenied();
                struct.ad.read(iprot);
                struct.setAdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRootGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Group _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ad != null) {
          oprot.writeFieldBegin(AD_FIELD_DESC);
          struct.ad.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRootGroups_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRootGroups_resultTupleScheme getScheme() {
        return new getRootGroups_resultTupleScheme();
      }
    }

    private static class getRootGroups_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRootGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRootGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBre()) {
          optionals.set(1);
        }
        if (struct.isSetBse()) {
          optionals.set(2);
        }
        if (struct.isSetIse()) {
          optionals.set(3);
        }
        if (struct.isSetUe()) {
          optionals.set(4);
        }
        if (struct.isSetAd()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Group _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAd()) {
          struct.ad.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRootGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Group>(_list21.size);
            Group _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Group();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ad = new AccessDenied();
          struct.ad.read(iprot);
          struct.setAdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChildrenGroups_args implements org.apache.thrift.TBase<getChildrenGroups_args, getChildrenGroups_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChildrenGroups_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChildrenGroups_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChildrenGroups_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChildrenGroups_argsTupleSchemeFactory();

    public Session session; // required
    public java.lang.String parentGroupId; // required
    public boolean recursive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PARENT_GROUP_ID((short)2, "parentGroupId"),
      RECURSIVE((short)3, "recursive");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PARENT_GROUP_ID
            return PARENT_GROUP_ID;
          case 3: // RECURSIVE
            return RECURSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECURSIVE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.PARENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChildrenGroups_args.class, metaDataMap);
    }

    public getChildrenGroups_args() {
    }

    public getChildrenGroups_args(
      Session session,
      java.lang.String parentGroupId,
      boolean recursive)
    {
      this();
      this.session = session;
      this.parentGroupId = parentGroupId;
      this.recursive = recursive;
      setRecursiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChildrenGroups_args(getChildrenGroups_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
      if (other.isSetParentGroupId()) {
        this.parentGroupId = other.parentGroupId;
      }
      this.recursive = other.recursive;
    }

    public getChildrenGroups_args deepCopy() {
      return new getChildrenGroups_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.parentGroupId = null;
      setRecursiveIsSet(false);
      this.recursive = false;
    }

    public Session getSession() {
      return this.session;
    }

    public getChildrenGroups_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getParentGroupId() {
      return this.parentGroupId;
    }

    public getChildrenGroups_args setParentGroupId(java.lang.String parentGroupId) {
      this.parentGroupId = parentGroupId;
      return this;
    }

    public void unsetParentGroupId() {
      this.parentGroupId = null;
    }

    /** Returns true if field parentGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentGroupId() {
      return this.parentGroupId != null;
    }

    public void setParentGroupIdIsSet(boolean value) {
      if (!value) {
        this.parentGroupId = null;
      }
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public getChildrenGroups_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      case PARENT_GROUP_ID:
        if (value == null) {
          unsetParentGroupId();
        } else {
          setParentGroupId((java.lang.String)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PARENT_GROUP_ID:
        return getParentGroupId();

      case RECURSIVE:
        return isRecursive();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PARENT_GROUP_ID:
        return isSetParentGroupId();
      case RECURSIVE:
        return isSetRecursive();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChildrenGroups_args)
        return this.equals((getChildrenGroups_args)that);
      return false;
    }

    public boolean equals(getChildrenGroups_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_parentGroupId = true && this.isSetParentGroupId();
      boolean that_present_parentGroupId = true && that.isSetParentGroupId();
      if (this_present_parentGroupId || that_present_parentGroupId) {
        if (!(this_present_parentGroupId && that_present_parentGroupId))
          return false;
        if (!this.parentGroupId.equals(that.parentGroupId))
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetParentGroupId()) ? 131071 : 524287);
      if (isSetParentGroupId())
        hashCode = hashCode * 8191 + parentGroupId.hashCode();

      hashCode = hashCode * 8191 + ((recursive) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getChildrenGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParentGroupId()).compareTo(other.isSetParentGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentGroupId, other.parentGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChildrenGroups_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentGroupId:");
      if (this.parentGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChildrenGroups_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenGroups_argsStandardScheme getScheme() {
        return new getChildrenGroups_argsStandardScheme();
      }
    }

    private static class getChildrenGroups_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChildrenGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChildrenGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentGroupId = iprot.readString();
                struct.setParentGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChildrenGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parentGroupId != null) {
          oprot.writeFieldBegin(PARENT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.parentGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChildrenGroups_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenGroups_argsTupleScheme getScheme() {
        return new getChildrenGroups_argsTupleScheme();
      }
    }

    private static class getChildrenGroups_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChildrenGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChildrenGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetParentGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetRecursive()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
        if (struct.isSetParentGroupId()) {
          oprot.writeString(struct.parentGroupId);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChildrenGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentGroupId = iprot.readString();
          struct.setParentGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChildrenGroups_result implements org.apache.thrift.TBase<getChildrenGroups_result, getChildrenGroups_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChildrenGroups_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChildrenGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChildrenGroups_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChildrenGroups_resultTupleSchemeFactory();

    public java.util.List<Group> success; // required
    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ad; // required
    public ObjectNotFound one; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      AD((short)5, "ad"),
      ONE((short)6, "one");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // AD
            return AD;
          case 6: // ONE
            return ONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Group.class))));
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChildrenGroups_result.class, metaDataMap);
    }

    public getChildrenGroups_result() {
    }

    public getChildrenGroups_result(
      java.util.List<Group> success,
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ad,
      ObjectNotFound one)
    {
      this();
      this.success = success;
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ad = ad;
      this.one = one;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChildrenGroups_result(getChildrenGroups_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Group> __this__success = new java.util.ArrayList<Group>(other.success.size());
        for (Group other_element : other.success) {
          __this__success.add(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAd()) {
        this.ad = new AccessDenied(other.ad);
      }
      if (other.isSetOne()) {
        this.one = new ObjectNotFound(other.one);
      }
    }

    public getChildrenGroups_result deepCopy() {
      return new getChildrenGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ad = null;
      this.one = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Group> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Group>();
      }
      this.success.add(elem);
    }

    public java.util.List<Group> getSuccess() {
      return this.success;
    }

    public getChildrenGroups_result setSuccess(java.util.List<Group> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public getChildrenGroups_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public getChildrenGroups_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public getChildrenGroups_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public getChildrenGroups_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAd() {
      return this.ad;
    }

    public getChildrenGroups_result setAd(AccessDenied ad) {
      this.ad = ad;
      return this;
    }

    public void unsetAd() {
      this.ad = null;
    }

    /** Returns true if field ad is set (has been assigned a value) and false otherwise */
    public boolean isSetAd() {
      return this.ad != null;
    }

    public void setAdIsSet(boolean value) {
      if (!value) {
        this.ad = null;
      }
    }

    public ObjectNotFound getOne() {
      return this.one;
    }

    public getChildrenGroups_result setOne(ObjectNotFound one) {
      this.one = one;
      return this;
    }

    public void unsetOne() {
      this.one = null;
    }

    /** Returns true if field one is set (has been assigned a value) and false otherwise */
    public boolean isSetOne() {
      return this.one != null;
    }

    public void setOneIsSet(boolean value) {
      if (!value) {
        this.one = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Group>)value);
        }
        break;

      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case AD:
        if (value == null) {
          unsetAd();
        } else {
          setAd((AccessDenied)value);
        }
        break;

      case ONE:
        if (value == null) {
          unsetOne();
        } else {
          setOne((ObjectNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case AD:
        return getAd();

      case ONE:
        return getOne();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case AD:
        return isSetAd();
      case ONE:
        return isSetOne();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChildrenGroups_result)
        return this.equals((getChildrenGroups_result)that);
      return false;
    }

    public boolean equals(getChildrenGroups_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ad = true && this.isSetAd();
      boolean that_present_ad = true && that.isSetAd();
      if (this_present_ad || that_present_ad) {
        if (!(this_present_ad && that_present_ad))
          return false;
        if (!this.ad.equals(that.ad))
          return false;
      }

      boolean this_present_one = true && this.isSetOne();
      boolean that_present_one = true && that.isSetOne();
      if (this_present_one || that_present_one) {
        if (!(this_present_one && that_present_one))
          return false;
        if (!this.one.equals(that.one))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAd()) ? 131071 : 524287);
      if (isSetAd())
        hashCode = hashCode * 8191 + ad.hashCode();

      hashCode = hashCode * 8191 + ((isSetOne()) ? 131071 : 524287);
      if (isSetOne())
        hashCode = hashCode * 8191 + one.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getChildrenGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOne()).compareTo(other.isSetOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, other.one);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChildrenGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ad:");
      if (this.ad == null) {
        sb.append("null");
      } else {
        sb.append(this.ad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("one:");
      if (this.one == null) {
        sb.append("null");
      } else {
        sb.append(this.one);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChildrenGroups_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenGroups_resultStandardScheme getScheme() {
        return new getChildrenGroups_resultStandardScheme();
      }
    }

    private static class getChildrenGroups_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChildrenGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChildrenGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Group>(_list24.size);
                  Group _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Group();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ad = new AccessDenied();
                struct.ad.read(iprot);
                struct.setAdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.one = new ObjectNotFound();
                struct.one.read(iprot);
                struct.setOneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChildrenGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Group _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ad != null) {
          oprot.writeFieldBegin(AD_FIELD_DESC);
          struct.ad.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.one != null) {
          oprot.writeFieldBegin(ONE_FIELD_DESC);
          struct.one.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChildrenGroups_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenGroups_resultTupleScheme getScheme() {
        return new getChildrenGroups_resultTupleScheme();
      }
    }

    private static class getChildrenGroups_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChildrenGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChildrenGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBre()) {
          optionals.set(1);
        }
        if (struct.isSetBse()) {
          optionals.set(2);
        }
        if (struct.isSetIse()) {
          optionals.set(3);
        }
        if (struct.isSetUe()) {
          optionals.set(4);
        }
        if (struct.isSetAd()) {
          optionals.set(5);
        }
        if (struct.isSetOne()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Group _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAd()) {
          struct.ad.write(oprot);
        }
        if (struct.isSetOne()) {
          struct.one.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChildrenGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Group>(_list29.size);
            Group _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Group();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ad = new AccessDenied();
          struct.ad.read(iprot);
          struct.setAdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.one = new ObjectNotFound();
          struct.one.read(iprot);
          struct.setOneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCompanyWithAdditionalFields_args implements org.apache.thrift.TBase<createCompanyWithAdditionalFields_args, createCompanyWithAdditionalFields_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCompanyWithAdditionalFields_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCompanyWithAdditionalFields_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ADDITIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCompanyWithAdditionalFields_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCompanyWithAdditionalFields_argsTupleSchemeFactory();

    public Session session; // required
    public java.lang.String parentGroupId; // required
    public java.lang.String title; // required
    public License license; // required
    public AdditionalFields additionalFields; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PARENT_GROUP_ID((short)2, "parentGroupId"),
      TITLE((short)3, "title"),
      LICENSE((short)4, "license"),
      ADDITIONAL_FIELDS((short)5, "additionalFields");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PARENT_GROUP_ID
            return PARENT_GROUP_ID;
          case 3: // TITLE
            return TITLE;
          case 4: // LICENSE
            return LICENSE;
          case 5: // ADDITIONAL_FIELDS
            return ADDITIONAL_FIELDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.PARENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, License.class)));
      tmpMap.put(_Fields.ADDITIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("additionalFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalFields.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCompanyWithAdditionalFields_args.class, metaDataMap);
    }

    public createCompanyWithAdditionalFields_args() {
    }

    public createCompanyWithAdditionalFields_args(
      Session session,
      java.lang.String parentGroupId,
      java.lang.String title,
      License license,
      AdditionalFields additionalFields)
    {
      this();
      this.session = session;
      this.parentGroupId = parentGroupId;
      this.title = title;
      this.license = license;
      this.additionalFields = additionalFields;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCompanyWithAdditionalFields_args(createCompanyWithAdditionalFields_args other) {
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
      if (other.isSetParentGroupId()) {
        this.parentGroupId = other.parentGroupId;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetLicense()) {
        this.license = new License(other.license);
      }
      if (other.isSetAdditionalFields()) {
        this.additionalFields = new AdditionalFields(other.additionalFields);
      }
    }

    public createCompanyWithAdditionalFields_args deepCopy() {
      return new createCompanyWithAdditionalFields_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.parentGroupId = null;
      this.title = null;
      this.license = null;
      this.additionalFields = null;
    }

    public Session getSession() {
      return this.session;
    }

    public createCompanyWithAdditionalFields_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getParentGroupId() {
      return this.parentGroupId;
    }

    public createCompanyWithAdditionalFields_args setParentGroupId(java.lang.String parentGroupId) {
      this.parentGroupId = parentGroupId;
      return this;
    }

    public void unsetParentGroupId() {
      this.parentGroupId = null;
    }

    /** Returns true if field parentGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentGroupId() {
      return this.parentGroupId != null;
    }

    public void setParentGroupIdIsSet(boolean value) {
      if (!value) {
        this.parentGroupId = null;
      }
    }

    public java.lang.String getTitle() {
      return this.title;
    }

    public createCompanyWithAdditionalFields_args setTitle(java.lang.String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public License getLicense() {
      return this.license;
    }

    public createCompanyWithAdditionalFields_args setLicense(License license) {
      this.license = license;
      return this;
    }

    public void unsetLicense() {
      this.license = null;
    }

    /** Returns true if field license is set (has been assigned a value) and false otherwise */
    public boolean isSetLicense() {
      return this.license != null;
    }

    public void setLicenseIsSet(boolean value) {
      if (!value) {
        this.license = null;
      }
    }

    public AdditionalFields getAdditionalFields() {
      return this.additionalFields;
    }

    public createCompanyWithAdditionalFields_args setAdditionalFields(AdditionalFields additionalFields) {
      this.additionalFields = additionalFields;
      return this;
    }

    public void unsetAdditionalFields() {
      this.additionalFields = null;
    }

    /** Returns true if field additionalFields is set (has been assigned a value) and false otherwise */
    public boolean isSetAdditionalFields() {
      return this.additionalFields != null;
    }

    public void setAdditionalFieldsIsSet(boolean value) {
      if (!value) {
        this.additionalFields = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      case PARENT_GROUP_ID:
        if (value == null) {
          unsetParentGroupId();
        } else {
          setParentGroupId((java.lang.String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((java.lang.String)value);
        }
        break;

      case LICENSE:
        if (value == null) {
          unsetLicense();
        } else {
          setLicense((License)value);
        }
        break;

      case ADDITIONAL_FIELDS:
        if (value == null) {
          unsetAdditionalFields();
        } else {
          setAdditionalFields((AdditionalFields)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PARENT_GROUP_ID:
        return getParentGroupId();

      case TITLE:
        return getTitle();

      case LICENSE:
        return getLicense();

      case ADDITIONAL_FIELDS:
        return getAdditionalFields();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PARENT_GROUP_ID:
        return isSetParentGroupId();
      case TITLE:
        return isSetTitle();
      case LICENSE:
        return isSetLicense();
      case ADDITIONAL_FIELDS:
        return isSetAdditionalFields();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createCompanyWithAdditionalFields_args)
        return this.equals((createCompanyWithAdditionalFields_args)that);
      return false;
    }

    public boolean equals(createCompanyWithAdditionalFields_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_parentGroupId = true && this.isSetParentGroupId();
      boolean that_present_parentGroupId = true && that.isSetParentGroupId();
      if (this_present_parentGroupId || that_present_parentGroupId) {
        if (!(this_present_parentGroupId && that_present_parentGroupId))
          return false;
        if (!this.parentGroupId.equals(that.parentGroupId))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_license = true && this.isSetLicense();
      boolean that_present_license = true && that.isSetLicense();
      if (this_present_license || that_present_license) {
        if (!(this_present_license && that_present_license))
          return false;
        if (!this.license.equals(that.license))
          return false;
      }

      boolean this_present_additionalFields = true && this.isSetAdditionalFields();
      boolean that_present_additionalFields = true && that.isSetAdditionalFields();
      if (this_present_additionalFields || that_present_additionalFields) {
        if (!(this_present_additionalFields && that_present_additionalFields))
          return false;
        if (!this.additionalFields.equals(that.additionalFields))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetParentGroupId()) ? 131071 : 524287);
      if (isSetParentGroupId())
        hashCode = hashCode * 8191 + parentGroupId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
      if (isSetTitle())
        hashCode = hashCode * 8191 + title.hashCode();

      hashCode = hashCode * 8191 + ((isSetLicense()) ? 131071 : 524287);
      if (isSetLicense())
        hashCode = hashCode * 8191 + license.hashCode();

      hashCode = hashCode * 8191 + ((isSetAdditionalFields()) ? 131071 : 524287);
      if (isSetAdditionalFields())
        hashCode = hashCode * 8191 + additionalFields.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCompanyWithAdditionalFields_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParentGroupId()).compareTo(other.isSetParentGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentGroupId, other.parentGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLicense()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAdditionalFields()).compareTo(other.isSetAdditionalFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdditionalFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalFields, other.additionalFields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCompanyWithAdditionalFields_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentGroupId:");
      if (this.parentGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("additionalFields:");
      if (this.additionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalFields);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
      if (license != null) {
        license.validate();
      }
      if (additionalFields != null) {
        additionalFields.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCompanyWithAdditionalFields_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCompanyWithAdditionalFields_argsStandardScheme getScheme() {
        return new createCompanyWithAdditionalFields_argsStandardScheme();
      }
    }

    private static class createCompanyWithAdditionalFields_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCompanyWithAdditionalFields_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCompanyWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentGroupId = iprot.readString();
                struct.setParentGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LICENSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.license = new License();
                struct.license.read(iprot);
                struct.setLicenseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ADDITIONAL_FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.additionalFields = new AdditionalFields();
                struct.additionalFields.read(iprot);
                struct.setAdditionalFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCompanyWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parentGroupId != null) {
          oprot.writeFieldBegin(PARENT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.parentGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.license != null) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          struct.license.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.additionalFields != null) {
          oprot.writeFieldBegin(ADDITIONAL_FIELDS_FIELD_DESC);
          struct.additionalFields.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCompanyWithAdditionalFields_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCompanyWithAdditionalFields_argsTupleScheme getScheme() {
        return new createCompanyWithAdditionalFields_argsTupleScheme();
      }
    }

    private static class createCompanyWithAdditionalFields_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCompanyWithAdditionalFields_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCompanyWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetParentGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetTitle()) {
          optionals.set(2);
        }
        if (struct.isSetLicense()) {
          optionals.set(3);
        }
        if (struct.isSetAdditionalFields()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
        if (struct.isSetParentGroupId()) {
          oprot.writeString(struct.parentGroupId);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetLicense()) {
          struct.license.write(oprot);
        }
        if (struct.isSetAdditionalFields()) {
          struct.additionalFields.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCompanyWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentGroupId = iprot.readString();
          struct.setParentGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.license = new License();
          struct.license.read(iprot);
          struct.setLicenseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.additionalFields = new AdditionalFields();
          struct.additionalFields.read(iprot);
          struct.setAdditionalFieldsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCompanyWithAdditionalFields_result implements org.apache.thrift.TBase<createCompanyWithAdditionalFields_result, createCompanyWithAdditionalFields_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCompanyWithAdditionalFields_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCompanyWithAdditionalFields_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCompanyWithAdditionalFields_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCompanyWithAdditionalFields_resultTupleSchemeFactory();

    public Group success; // required
    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ad; // required
    public ObjectNotFound one; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      AD((short)5, "ad"),
      ONE((short)6, "one");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // AD
            return AD;
          case 6: // ONE
            return ONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Group.class)));
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCompanyWithAdditionalFields_result.class, metaDataMap);
    }

    public createCompanyWithAdditionalFields_result() {
    }

    public createCompanyWithAdditionalFields_result(
      Group success,
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ad,
      ObjectNotFound one)
    {
      this();
      this.success = success;
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ad = ad;
      this.one = one;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCompanyWithAdditionalFields_result(createCompanyWithAdditionalFields_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAd()) {
        this.ad = new AccessDenied(other.ad);
      }
      if (other.isSetOne()) {
        this.one = new ObjectNotFound(other.one);
      }
    }

    public createCompanyWithAdditionalFields_result deepCopy() {
      return new createCompanyWithAdditionalFields_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ad = null;
      this.one = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public createCompanyWithAdditionalFields_result setSuccess(Group success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public createCompanyWithAdditionalFields_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public createCompanyWithAdditionalFields_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public createCompanyWithAdditionalFields_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public createCompanyWithAdditionalFields_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAd() {
      return this.ad;
    }

    public createCompanyWithAdditionalFields_result setAd(AccessDenied ad) {
      this.ad = ad;
      return this;
    }

    public void unsetAd() {
      this.ad = null;
    }

    /** Returns true if field ad is set (has been assigned a value) and false otherwise */
    public boolean isSetAd() {
      return this.ad != null;
    }

    public void setAdIsSet(boolean value) {
      if (!value) {
        this.ad = null;
      }
    }

    public ObjectNotFound getOne() {
      return this.one;
    }

    public createCompanyWithAdditionalFields_result setOne(ObjectNotFound one) {
      this.one = one;
      return this;
    }

    public void unsetOne() {
      this.one = null;
    }

    /** Returns true if field one is set (has been assigned a value) and false otherwise */
    public boolean isSetOne() {
      return this.one != null;
    }

    public void setOneIsSet(boolean value) {
      if (!value) {
        this.one = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Group)value);
        }
        break;

      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case AD:
        if (value == null) {
          unsetAd();
        } else {
          setAd((AccessDenied)value);
        }
        break;

      case ONE:
        if (value == null) {
          unsetOne();
        } else {
          setOne((ObjectNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case AD:
        return getAd();

      case ONE:
        return getOne();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case AD:
        return isSetAd();
      case ONE:
        return isSetOne();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createCompanyWithAdditionalFields_result)
        return this.equals((createCompanyWithAdditionalFields_result)that);
      return false;
    }

    public boolean equals(createCompanyWithAdditionalFields_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ad = true && this.isSetAd();
      boolean that_present_ad = true && that.isSetAd();
      if (this_present_ad || that_present_ad) {
        if (!(this_present_ad && that_present_ad))
          return false;
        if (!this.ad.equals(that.ad))
          return false;
      }

      boolean this_present_one = true && this.isSetOne();
      boolean that_present_one = true && that.isSetOne();
      if (this_present_one || that_present_one) {
        if (!(this_present_one && that_present_one))
          return false;
        if (!this.one.equals(that.one))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAd()) ? 131071 : 524287);
      if (isSetAd())
        hashCode = hashCode * 8191 + ad.hashCode();

      hashCode = hashCode * 8191 + ((isSetOne()) ? 131071 : 524287);
      if (isSetOne())
        hashCode = hashCode * 8191 + one.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCompanyWithAdditionalFields_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOne()).compareTo(other.isSetOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, other.one);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCompanyWithAdditionalFields_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ad:");
      if (this.ad == null) {
        sb.append("null");
      } else {
        sb.append(this.ad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("one:");
      if (this.one == null) {
        sb.append("null");
      } else {
        sb.append(this.one);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCompanyWithAdditionalFields_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCompanyWithAdditionalFields_resultStandardScheme getScheme() {
        return new createCompanyWithAdditionalFields_resultStandardScheme();
      }
    }

    private static class createCompanyWithAdditionalFields_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCompanyWithAdditionalFields_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCompanyWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Group();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ad = new AccessDenied();
                struct.ad.read(iprot);
                struct.setAdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.one = new ObjectNotFound();
                struct.one.read(iprot);
                struct.setOneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCompanyWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ad != null) {
          oprot.writeFieldBegin(AD_FIELD_DESC);
          struct.ad.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.one != null) {
          oprot.writeFieldBegin(ONE_FIELD_DESC);
          struct.one.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCompanyWithAdditionalFields_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCompanyWithAdditionalFields_resultTupleScheme getScheme() {
        return new createCompanyWithAdditionalFields_resultTupleScheme();
      }
    }

    private static class createCompanyWithAdditionalFields_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCompanyWithAdditionalFields_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCompanyWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBre()) {
          optionals.set(1);
        }
        if (struct.isSetBse()) {
          optionals.set(2);
        }
        if (struct.isSetIse()) {
          optionals.set(3);
        }
        if (struct.isSetUe()) {
          optionals.set(4);
        }
        if (struct.isSetAd()) {
          optionals.set(5);
        }
        if (struct.isSetOne()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAd()) {
          struct.ad.write(oprot);
        }
        if (struct.isSetOne()) {
          struct.one.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCompanyWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new Group();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ad = new AccessDenied();
          struct.ad.read(iprot);
          struct.setAdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.one = new ObjectNotFound();
          struct.one.read(iprot);
          struct.setOneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class editGroup_args implements org.apache.thrift.TBase<editGroup_args, editGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<editGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editGroup_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new editGroup_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new editGroup_argsTupleSchemeFactory();

    public Session session; // required
    public Group data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      DATA((short)2, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Group.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editGroup_args.class, metaDataMap);
    }

    public editGroup_args() {
    }

    public editGroup_args(
      Session session,
      Group data)
    {
      this();
      this.session = session;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editGroup_args(editGroup_args other) {
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
      if (other.isSetData()) {
        this.data = new Group(other.data);
      }
    }

    public editGroup_args deepCopy() {
      return new editGroup_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.data = null;
    }

    public Session getSession() {
      return this.session;
    }

    public editGroup_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public Group getData() {
      return this.data;
    }

    public editGroup_args setData(Group data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((Group)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof editGroup_args)
        return this.equals((editGroup_args)that);
      return false;
    }

    public boolean equals(editGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(editGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("editGroup_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
      if (data != null) {
        data.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editGroup_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editGroup_argsStandardScheme getScheme() {
        return new editGroup_argsStandardScheme();
      }
    }

    private static class editGroup_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<editGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new Group();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editGroup_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editGroup_argsTupleScheme getScheme() {
        return new editGroup_argsTupleScheme();
      }
    }

    private static class editGroup_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<editGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = new Group();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class editGroup_result implements org.apache.thrift.TBase<editGroup_result, editGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<editGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editGroup_result");

    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ade", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new editGroup_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new editGroup_resultTupleSchemeFactory();

    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ade; // required
    public ObjectNotFound one; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      ADE((short)5, "ade"),
      ONE((short)6, "one");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // ADE
            return ADE;
          case 6: // ONE
            return ONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.ADE, new org.apache.thrift.meta_data.FieldMetaData("ade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editGroup_result.class, metaDataMap);
    }

    public editGroup_result() {
    }

    public editGroup_result(
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ade,
      ObjectNotFound one)
    {
      this();
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ade = ade;
      this.one = one;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editGroup_result(editGroup_result other) {
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAde()) {
        this.ade = new AccessDenied(other.ade);
      }
      if (other.isSetOne()) {
        this.one = new ObjectNotFound(other.one);
      }
    }

    public editGroup_result deepCopy() {
      return new editGroup_result(this);
    }

    @Override
    public void clear() {
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ade = null;
      this.one = null;
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public editGroup_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public editGroup_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public editGroup_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public editGroup_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAde() {
      return this.ade;
    }

    public editGroup_result setAde(AccessDenied ade) {
      this.ade = ade;
      return this;
    }

    public void unsetAde() {
      this.ade = null;
    }

    /** Returns true if field ade is set (has been assigned a value) and false otherwise */
    public boolean isSetAde() {
      return this.ade != null;
    }

    public void setAdeIsSet(boolean value) {
      if (!value) {
        this.ade = null;
      }
    }

    public ObjectNotFound getOne() {
      return this.one;
    }

    public editGroup_result setOne(ObjectNotFound one) {
      this.one = one;
      return this;
    }

    public void unsetOne() {
      this.one = null;
    }

    /** Returns true if field one is set (has been assigned a value) and false otherwise */
    public boolean isSetOne() {
      return this.one != null;
    }

    public void setOneIsSet(boolean value) {
      if (!value) {
        this.one = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case ADE:
        if (value == null) {
          unsetAde();
        } else {
          setAde((AccessDenied)value);
        }
        break;

      case ONE:
        if (value == null) {
          unsetOne();
        } else {
          setOne((ObjectNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case ADE:
        return getAde();

      case ONE:
        return getOne();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case ADE:
        return isSetAde();
      case ONE:
        return isSetOne();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof editGroup_result)
        return this.equals((editGroup_result)that);
      return false;
    }

    public boolean equals(editGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ade = true && this.isSetAde();
      boolean that_present_ade = true && that.isSetAde();
      if (this_present_ade || that_present_ade) {
        if (!(this_present_ade && that_present_ade))
          return false;
        if (!this.ade.equals(that.ade))
          return false;
      }

      boolean this_present_one = true && this.isSetOne();
      boolean that_present_one = true && that.isSetOne();
      if (this_present_one || that_present_one) {
        if (!(this_present_one && that_present_one))
          return false;
        if (!this.one.equals(that.one))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAde()) ? 131071 : 524287);
      if (isSetAde())
        hashCode = hashCode * 8191 + ade.hashCode();

      hashCode = hashCode * 8191 + ((isSetOne()) ? 131071 : 524287);
      if (isSetOne())
        hashCode = hashCode * 8191 + one.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(editGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAde()).compareTo(other.isSetAde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ade, other.ade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOne()).compareTo(other.isSetOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, other.one);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("editGroup_result(");
      boolean first = true;

      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ade:");
      if (this.ade == null) {
        sb.append("null");
      } else {
        sb.append(this.ade);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("one:");
      if (this.one == null) {
        sb.append("null");
      } else {
        sb.append(this.one);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editGroup_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editGroup_resultStandardScheme getScheme() {
        return new editGroup_resultStandardScheme();
      }
    }

    private static class editGroup_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<editGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ADE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ade = new AccessDenied();
                struct.ade.read(iprot);
                struct.setAdeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.one = new ObjectNotFound();
                struct.one.read(iprot);
                struct.setOneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ade != null) {
          oprot.writeFieldBegin(ADE_FIELD_DESC);
          struct.ade.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.one != null) {
          oprot.writeFieldBegin(ONE_FIELD_DESC);
          struct.one.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editGroup_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editGroup_resultTupleScheme getScheme() {
        return new editGroup_resultTupleScheme();
      }
    }

    private static class editGroup_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<editGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBre()) {
          optionals.set(0);
        }
        if (struct.isSetBse()) {
          optionals.set(1);
        }
        if (struct.isSetIse()) {
          optionals.set(2);
        }
        if (struct.isSetUe()) {
          optionals.set(3);
        }
        if (struct.isSetAde()) {
          optionals.set(4);
        }
        if (struct.isSetOne()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAde()) {
          struct.ade.write(oprot);
        }
        if (struct.isSetOne()) {
          struct.one.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ade = new AccessDenied();
          struct.ade.read(iprot);
          struct.setAdeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.one = new ObjectNotFound();
          struct.one.read(iprot);
          struct.setOneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChildrenMonitoringObjects_args implements org.apache.thrift.TBase<getChildrenMonitoringObjects_args, getChildrenMonitoringObjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<getChildrenMonitoringObjects_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChildrenMonitoringObjects_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECURSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("recursive", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChildrenMonitoringObjects_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChildrenMonitoringObjects_argsTupleSchemeFactory();

    public Session session; // required
    public java.lang.String parentGroupId; // required
    public boolean recursive; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PARENT_GROUP_ID((short)2, "parentGroupId"),
      RECURSIVE((short)3, "recursive");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PARENT_GROUP_ID
            return PARENT_GROUP_ID;
          case 3: // RECURSIVE
            return RECURSIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECURSIVE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.PARENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECURSIVE, new org.apache.thrift.meta_data.FieldMetaData("recursive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChildrenMonitoringObjects_args.class, metaDataMap);
    }

    public getChildrenMonitoringObjects_args() {
    }

    public getChildrenMonitoringObjects_args(
      Session session,
      java.lang.String parentGroupId,
      boolean recursive)
    {
      this();
      this.session = session;
      this.parentGroupId = parentGroupId;
      this.recursive = recursive;
      setRecursiveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChildrenMonitoringObjects_args(getChildrenMonitoringObjects_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
      if (other.isSetParentGroupId()) {
        this.parentGroupId = other.parentGroupId;
      }
      this.recursive = other.recursive;
    }

    public getChildrenMonitoringObjects_args deepCopy() {
      return new getChildrenMonitoringObjects_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.parentGroupId = null;
      setRecursiveIsSet(false);
      this.recursive = false;
    }

    public Session getSession() {
      return this.session;
    }

    public getChildrenMonitoringObjects_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getParentGroupId() {
      return this.parentGroupId;
    }

    public getChildrenMonitoringObjects_args setParentGroupId(java.lang.String parentGroupId) {
      this.parentGroupId = parentGroupId;
      return this;
    }

    public void unsetParentGroupId() {
      this.parentGroupId = null;
    }

    /** Returns true if field parentGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentGroupId() {
      return this.parentGroupId != null;
    }

    public void setParentGroupIdIsSet(boolean value) {
      if (!value) {
        this.parentGroupId = null;
      }
    }

    public boolean isRecursive() {
      return this.recursive;
    }

    public getChildrenMonitoringObjects_args setRecursive(boolean recursive) {
      this.recursive = recursive;
      setRecursiveIsSet(true);
      return this;
    }

    public void unsetRecursive() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    /** Returns true if field recursive is set (has been assigned a value) and false otherwise */
    public boolean isSetRecursive() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECURSIVE_ISSET_ID);
    }

    public void setRecursiveIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECURSIVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      case PARENT_GROUP_ID:
        if (value == null) {
          unsetParentGroupId();
        } else {
          setParentGroupId((java.lang.String)value);
        }
        break;

      case RECURSIVE:
        if (value == null) {
          unsetRecursive();
        } else {
          setRecursive((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PARENT_GROUP_ID:
        return getParentGroupId();

      case RECURSIVE:
        return isRecursive();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PARENT_GROUP_ID:
        return isSetParentGroupId();
      case RECURSIVE:
        return isSetRecursive();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChildrenMonitoringObjects_args)
        return this.equals((getChildrenMonitoringObjects_args)that);
      return false;
    }

    public boolean equals(getChildrenMonitoringObjects_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_parentGroupId = true && this.isSetParentGroupId();
      boolean that_present_parentGroupId = true && that.isSetParentGroupId();
      if (this_present_parentGroupId || that_present_parentGroupId) {
        if (!(this_present_parentGroupId && that_present_parentGroupId))
          return false;
        if (!this.parentGroupId.equals(that.parentGroupId))
          return false;
      }

      boolean this_present_recursive = true;
      boolean that_present_recursive = true;
      if (this_present_recursive || that_present_recursive) {
        if (!(this_present_recursive && that_present_recursive))
          return false;
        if (this.recursive != that.recursive)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetParentGroupId()) ? 131071 : 524287);
      if (isSetParentGroupId())
        hashCode = hashCode * 8191 + parentGroupId.hashCode();

      hashCode = hashCode * 8191 + ((recursive) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getChildrenMonitoringObjects_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParentGroupId()).compareTo(other.isSetParentGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentGroupId, other.parentGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRecursive()).compareTo(other.isSetRecursive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecursive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursive, other.recursive);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChildrenMonitoringObjects_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentGroupId:");
      if (this.parentGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recursive:");
      sb.append(this.recursive);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChildrenMonitoringObjects_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenMonitoringObjects_argsStandardScheme getScheme() {
        return new getChildrenMonitoringObjects_argsStandardScheme();
      }
    }

    private static class getChildrenMonitoringObjects_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChildrenMonitoringObjects_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChildrenMonitoringObjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentGroupId = iprot.readString();
                struct.setParentGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECURSIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.recursive = iprot.readBool();
                struct.setRecursiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChildrenMonitoringObjects_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parentGroupId != null) {
          oprot.writeFieldBegin(PARENT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.parentGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECURSIVE_FIELD_DESC);
        oprot.writeBool(struct.recursive);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChildrenMonitoringObjects_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenMonitoringObjects_argsTupleScheme getScheme() {
        return new getChildrenMonitoringObjects_argsTupleScheme();
      }
    }

    private static class getChildrenMonitoringObjects_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChildrenMonitoringObjects_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChildrenMonitoringObjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetParentGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetRecursive()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
        if (struct.isSetParentGroupId()) {
          oprot.writeString(struct.parentGroupId);
        }
        if (struct.isSetRecursive()) {
          oprot.writeBool(struct.recursive);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChildrenMonitoringObjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentGroupId = iprot.readString();
          struct.setParentGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recursive = iprot.readBool();
          struct.setRecursiveIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getChildrenMonitoringObjects_result implements org.apache.thrift.TBase<getChildrenMonitoringObjects_result, getChildrenMonitoringObjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<getChildrenMonitoringObjects_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getChildrenMonitoringObjects_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getChildrenMonitoringObjects_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getChildrenMonitoringObjects_resultTupleSchemeFactory();

    public java.util.List<MonitoringObject> success; // required
    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ad; // required
    public ObjectNotFound one; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      AD((short)5, "ad"),
      ONE((short)6, "one");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // AD
            return AD;
          case 6: // ONE
            return ONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonitoringObject.class))));
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getChildrenMonitoringObjects_result.class, metaDataMap);
    }

    public getChildrenMonitoringObjects_result() {
    }

    public getChildrenMonitoringObjects_result(
      java.util.List<MonitoringObject> success,
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ad,
      ObjectNotFound one)
    {
      this();
      this.success = success;
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ad = ad;
      this.one = one;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChildrenMonitoringObjects_result(getChildrenMonitoringObjects_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MonitoringObject> __this__success = new java.util.ArrayList<MonitoringObject>(other.success.size());
        for (MonitoringObject other_element : other.success) {
          __this__success.add(new MonitoringObject(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAd()) {
        this.ad = new AccessDenied(other.ad);
      }
      if (other.isSetOne()) {
        this.one = new ObjectNotFound(other.one);
      }
    }

    public getChildrenMonitoringObjects_result deepCopy() {
      return new getChildrenMonitoringObjects_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ad = null;
      this.one = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MonitoringObject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MonitoringObject elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MonitoringObject>();
      }
      this.success.add(elem);
    }

    public java.util.List<MonitoringObject> getSuccess() {
      return this.success;
    }

    public getChildrenMonitoringObjects_result setSuccess(java.util.List<MonitoringObject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public getChildrenMonitoringObjects_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public getChildrenMonitoringObjects_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public getChildrenMonitoringObjects_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public getChildrenMonitoringObjects_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAd() {
      return this.ad;
    }

    public getChildrenMonitoringObjects_result setAd(AccessDenied ad) {
      this.ad = ad;
      return this;
    }

    public void unsetAd() {
      this.ad = null;
    }

    /** Returns true if field ad is set (has been assigned a value) and false otherwise */
    public boolean isSetAd() {
      return this.ad != null;
    }

    public void setAdIsSet(boolean value) {
      if (!value) {
        this.ad = null;
      }
    }

    public ObjectNotFound getOne() {
      return this.one;
    }

    public getChildrenMonitoringObjects_result setOne(ObjectNotFound one) {
      this.one = one;
      return this;
    }

    public void unsetOne() {
      this.one = null;
    }

    /** Returns true if field one is set (has been assigned a value) and false otherwise */
    public boolean isSetOne() {
      return this.one != null;
    }

    public void setOneIsSet(boolean value) {
      if (!value) {
        this.one = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MonitoringObject>)value);
        }
        break;

      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case AD:
        if (value == null) {
          unsetAd();
        } else {
          setAd((AccessDenied)value);
        }
        break;

      case ONE:
        if (value == null) {
          unsetOne();
        } else {
          setOne((ObjectNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case AD:
        return getAd();

      case ONE:
        return getOne();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case AD:
        return isSetAd();
      case ONE:
        return isSetOne();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getChildrenMonitoringObjects_result)
        return this.equals((getChildrenMonitoringObjects_result)that);
      return false;
    }

    public boolean equals(getChildrenMonitoringObjects_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ad = true && this.isSetAd();
      boolean that_present_ad = true && that.isSetAd();
      if (this_present_ad || that_present_ad) {
        if (!(this_present_ad && that_present_ad))
          return false;
        if (!this.ad.equals(that.ad))
          return false;
      }

      boolean this_present_one = true && this.isSetOne();
      boolean that_present_one = true && that.isSetOne();
      if (this_present_one || that_present_one) {
        if (!(this_present_one && that_present_one))
          return false;
        if (!this.one.equals(that.one))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAd()) ? 131071 : 524287);
      if (isSetAd())
        hashCode = hashCode * 8191 + ad.hashCode();

      hashCode = hashCode * 8191 + ((isSetOne()) ? 131071 : 524287);
      if (isSetOne())
        hashCode = hashCode * 8191 + one.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getChildrenMonitoringObjects_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOne()).compareTo(other.isSetOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, other.one);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getChildrenMonitoringObjects_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ad:");
      if (this.ad == null) {
        sb.append("null");
      } else {
        sb.append(this.ad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("one:");
      if (this.one == null) {
        sb.append("null");
      } else {
        sb.append(this.one);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getChildrenMonitoringObjects_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenMonitoringObjects_resultStandardScheme getScheme() {
        return new getChildrenMonitoringObjects_resultStandardScheme();
      }
    }

    private static class getChildrenMonitoringObjects_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getChildrenMonitoringObjects_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getChildrenMonitoringObjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MonitoringObject>(_list32.size);
                  MonitoringObject _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new MonitoringObject();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ad = new AccessDenied();
                struct.ad.read(iprot);
                struct.setAdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.one = new ObjectNotFound();
                struct.one.read(iprot);
                struct.setOneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getChildrenMonitoringObjects_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MonitoringObject _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ad != null) {
          oprot.writeFieldBegin(AD_FIELD_DESC);
          struct.ad.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.one != null) {
          oprot.writeFieldBegin(ONE_FIELD_DESC);
          struct.one.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getChildrenMonitoringObjects_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getChildrenMonitoringObjects_resultTupleScheme getScheme() {
        return new getChildrenMonitoringObjects_resultTupleScheme();
      }
    }

    private static class getChildrenMonitoringObjects_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getChildrenMonitoringObjects_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getChildrenMonitoringObjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBre()) {
          optionals.set(1);
        }
        if (struct.isSetBse()) {
          optionals.set(2);
        }
        if (struct.isSetIse()) {
          optionals.set(3);
        }
        if (struct.isSetUe()) {
          optionals.set(4);
        }
        if (struct.isSetAd()) {
          optionals.set(5);
        }
        if (struct.isSetOne()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MonitoringObject _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAd()) {
          struct.ad.write(oprot);
        }
        if (struct.isSetOne()) {
          struct.one.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getChildrenMonitoringObjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MonitoringObject>(_list37.size);
            MonitoringObject _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new MonitoringObject();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ad = new AccessDenied();
          struct.ad.read(iprot);
          struct.setAdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.one = new ObjectNotFound();
          struct.one.read(iprot);
          struct.setOneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMonitoringObjectWithAdditionalFields_args implements org.apache.thrift.TBase<createMonitoringObjectWithAdditionalFields_args, createMonitoringObjectWithAdditionalFields_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMonitoringObjectWithAdditionalFields_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMonitoringObjectWithAdditionalFields_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TRACKER_FIELD_DESC = new org.apache.thrift.protocol.TField("tracker", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DISPLAY_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("displayColor", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DISPLAY_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("displayIcon", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ADDITIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMonitoringObjectWithAdditionalFields_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMonitoringObjectWithAdditionalFields_argsTupleSchemeFactory();

    public Session session; // required
    public java.lang.String parentGroupId; // required
    public Tracker tracker; // required
    public java.lang.String name; // required
    public java.lang.String displayColor; // required
    public java.lang.String displayIcon; // required
    public AdditionalFields additionalFields; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PARENT_GROUP_ID((short)2, "parentGroupId"),
      TRACKER((short)3, "tracker"),
      NAME((short)4, "name"),
      DISPLAY_COLOR((short)5, "displayColor"),
      DISPLAY_ICON((short)6, "displayIcon"),
      ADDITIONAL_FIELDS((short)7, "additionalFields");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PARENT_GROUP_ID
            return PARENT_GROUP_ID;
          case 3: // TRACKER
            return TRACKER;
          case 4: // NAME
            return NAME;
          case 5: // DISPLAY_COLOR
            return DISPLAY_COLOR;
          case 6: // DISPLAY_ICON
            return DISPLAY_ICON;
          case 7: // ADDITIONAL_FIELDS
            return ADDITIONAL_FIELDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.PARENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRACKER, new org.apache.thrift.meta_data.FieldMetaData("tracker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tracker.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DISPLAY_COLOR, new org.apache.thrift.meta_data.FieldMetaData("displayColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DISPLAY_ICON, new org.apache.thrift.meta_data.FieldMetaData("displayIcon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDITIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("additionalFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalFields.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMonitoringObjectWithAdditionalFields_args.class, metaDataMap);
    }

    public createMonitoringObjectWithAdditionalFields_args() {
    }

    public createMonitoringObjectWithAdditionalFields_args(
      Session session,
      java.lang.String parentGroupId,
      Tracker tracker,
      java.lang.String name,
      java.lang.String displayColor,
      java.lang.String displayIcon,
      AdditionalFields additionalFields)
    {
      this();
      this.session = session;
      this.parentGroupId = parentGroupId;
      this.tracker = tracker;
      this.name = name;
      this.displayColor = displayColor;
      this.displayIcon = displayIcon;
      this.additionalFields = additionalFields;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMonitoringObjectWithAdditionalFields_args(createMonitoringObjectWithAdditionalFields_args other) {
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
      if (other.isSetParentGroupId()) {
        this.parentGroupId = other.parentGroupId;
      }
      if (other.isSetTracker()) {
        this.tracker = new Tracker(other.tracker);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetDisplayColor()) {
        this.displayColor = other.displayColor;
      }
      if (other.isSetDisplayIcon()) {
        this.displayIcon = other.displayIcon;
      }
      if (other.isSetAdditionalFields()) {
        this.additionalFields = new AdditionalFields(other.additionalFields);
      }
    }

    public createMonitoringObjectWithAdditionalFields_args deepCopy() {
      return new createMonitoringObjectWithAdditionalFields_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.parentGroupId = null;
      this.tracker = null;
      this.name = null;
      this.displayColor = null;
      this.displayIcon = null;
      this.additionalFields = null;
    }

    public Session getSession() {
      return this.session;
    }

    public createMonitoringObjectWithAdditionalFields_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getParentGroupId() {
      return this.parentGroupId;
    }

    public createMonitoringObjectWithAdditionalFields_args setParentGroupId(java.lang.String parentGroupId) {
      this.parentGroupId = parentGroupId;
      return this;
    }

    public void unsetParentGroupId() {
      this.parentGroupId = null;
    }

    /** Returns true if field parentGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentGroupId() {
      return this.parentGroupId != null;
    }

    public void setParentGroupIdIsSet(boolean value) {
      if (!value) {
        this.parentGroupId = null;
      }
    }

    public Tracker getTracker() {
      return this.tracker;
    }

    public createMonitoringObjectWithAdditionalFields_args setTracker(Tracker tracker) {
      this.tracker = tracker;
      return this;
    }

    public void unsetTracker() {
      this.tracker = null;
    }

    /** Returns true if field tracker is set (has been assigned a value) and false otherwise */
    public boolean isSetTracker() {
      return this.tracker != null;
    }

    public void setTrackerIsSet(boolean value) {
      if (!value) {
        this.tracker = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public createMonitoringObjectWithAdditionalFields_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public java.lang.String getDisplayColor() {
      return this.displayColor;
    }

    public createMonitoringObjectWithAdditionalFields_args setDisplayColor(java.lang.String displayColor) {
      this.displayColor = displayColor;
      return this;
    }

    public void unsetDisplayColor() {
      this.displayColor = null;
    }

    /** Returns true if field displayColor is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayColor() {
      return this.displayColor != null;
    }

    public void setDisplayColorIsSet(boolean value) {
      if (!value) {
        this.displayColor = null;
      }
    }

    public java.lang.String getDisplayIcon() {
      return this.displayIcon;
    }

    public createMonitoringObjectWithAdditionalFields_args setDisplayIcon(java.lang.String displayIcon) {
      this.displayIcon = displayIcon;
      return this;
    }

    public void unsetDisplayIcon() {
      this.displayIcon = null;
    }

    /** Returns true if field displayIcon is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayIcon() {
      return this.displayIcon != null;
    }

    public void setDisplayIconIsSet(boolean value) {
      if (!value) {
        this.displayIcon = null;
      }
    }

    public AdditionalFields getAdditionalFields() {
      return this.additionalFields;
    }

    public createMonitoringObjectWithAdditionalFields_args setAdditionalFields(AdditionalFields additionalFields) {
      this.additionalFields = additionalFields;
      return this;
    }

    public void unsetAdditionalFields() {
      this.additionalFields = null;
    }

    /** Returns true if field additionalFields is set (has been assigned a value) and false otherwise */
    public boolean isSetAdditionalFields() {
      return this.additionalFields != null;
    }

    public void setAdditionalFieldsIsSet(boolean value) {
      if (!value) {
        this.additionalFields = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      case PARENT_GROUP_ID:
        if (value == null) {
          unsetParentGroupId();
        } else {
          setParentGroupId((java.lang.String)value);
        }
        break;

      case TRACKER:
        if (value == null) {
          unsetTracker();
        } else {
          setTracker((Tracker)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case DISPLAY_COLOR:
        if (value == null) {
          unsetDisplayColor();
        } else {
          setDisplayColor((java.lang.String)value);
        }
        break;

      case DISPLAY_ICON:
        if (value == null) {
          unsetDisplayIcon();
        } else {
          setDisplayIcon((java.lang.String)value);
        }
        break;

      case ADDITIONAL_FIELDS:
        if (value == null) {
          unsetAdditionalFields();
        } else {
          setAdditionalFields((AdditionalFields)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PARENT_GROUP_ID:
        return getParentGroupId();

      case TRACKER:
        return getTracker();

      case NAME:
        return getName();

      case DISPLAY_COLOR:
        return getDisplayColor();

      case DISPLAY_ICON:
        return getDisplayIcon();

      case ADDITIONAL_FIELDS:
        return getAdditionalFields();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PARENT_GROUP_ID:
        return isSetParentGroupId();
      case TRACKER:
        return isSetTracker();
      case NAME:
        return isSetName();
      case DISPLAY_COLOR:
        return isSetDisplayColor();
      case DISPLAY_ICON:
        return isSetDisplayIcon();
      case ADDITIONAL_FIELDS:
        return isSetAdditionalFields();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMonitoringObjectWithAdditionalFields_args)
        return this.equals((createMonitoringObjectWithAdditionalFields_args)that);
      return false;
    }

    public boolean equals(createMonitoringObjectWithAdditionalFields_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_parentGroupId = true && this.isSetParentGroupId();
      boolean that_present_parentGroupId = true && that.isSetParentGroupId();
      if (this_present_parentGroupId || that_present_parentGroupId) {
        if (!(this_present_parentGroupId && that_present_parentGroupId))
          return false;
        if (!this.parentGroupId.equals(that.parentGroupId))
          return false;
      }

      boolean this_present_tracker = true && this.isSetTracker();
      boolean that_present_tracker = true && that.isSetTracker();
      if (this_present_tracker || that_present_tracker) {
        if (!(this_present_tracker && that_present_tracker))
          return false;
        if (!this.tracker.equals(that.tracker))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_displayColor = true && this.isSetDisplayColor();
      boolean that_present_displayColor = true && that.isSetDisplayColor();
      if (this_present_displayColor || that_present_displayColor) {
        if (!(this_present_displayColor && that_present_displayColor))
          return false;
        if (!this.displayColor.equals(that.displayColor))
          return false;
      }

      boolean this_present_displayIcon = true && this.isSetDisplayIcon();
      boolean that_present_displayIcon = true && that.isSetDisplayIcon();
      if (this_present_displayIcon || that_present_displayIcon) {
        if (!(this_present_displayIcon && that_present_displayIcon))
          return false;
        if (!this.displayIcon.equals(that.displayIcon))
          return false;
      }

      boolean this_present_additionalFields = true && this.isSetAdditionalFields();
      boolean that_present_additionalFields = true && that.isSetAdditionalFields();
      if (this_present_additionalFields || that_present_additionalFields) {
        if (!(this_present_additionalFields && that_present_additionalFields))
          return false;
        if (!this.additionalFields.equals(that.additionalFields))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetParentGroupId()) ? 131071 : 524287);
      if (isSetParentGroupId())
        hashCode = hashCode * 8191 + parentGroupId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTracker()) ? 131071 : 524287);
      if (isSetTracker())
        hashCode = hashCode * 8191 + tracker.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetDisplayColor()) ? 131071 : 524287);
      if (isSetDisplayColor())
        hashCode = hashCode * 8191 + displayColor.hashCode();

      hashCode = hashCode * 8191 + ((isSetDisplayIcon()) ? 131071 : 524287);
      if (isSetDisplayIcon())
        hashCode = hashCode * 8191 + displayIcon.hashCode();

      hashCode = hashCode * 8191 + ((isSetAdditionalFields()) ? 131071 : 524287);
      if (isSetAdditionalFields())
        hashCode = hashCode * 8191 + additionalFields.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMonitoringObjectWithAdditionalFields_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParentGroupId()).compareTo(other.isSetParentGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentGroupId, other.parentGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTracker()).compareTo(other.isSetTracker());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTracker()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracker, other.tracker);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDisplayColor()).compareTo(other.isSetDisplayColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayColor, other.displayColor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDisplayIcon()).compareTo(other.isSetDisplayIcon());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayIcon()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayIcon, other.displayIcon);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAdditionalFields()).compareTo(other.isSetAdditionalFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdditionalFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalFields, other.additionalFields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMonitoringObjectWithAdditionalFields_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentGroupId:");
      if (this.parentGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tracker:");
      if (this.tracker == null) {
        sb.append("null");
      } else {
        sb.append(this.tracker);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayColor:");
      if (this.displayColor == null) {
        sb.append("null");
      } else {
        sb.append(this.displayColor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayIcon:");
      if (this.displayIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.displayIcon);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("additionalFields:");
      if (this.additionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalFields);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
      if (tracker != null) {
        tracker.validate();
      }
      if (additionalFields != null) {
        additionalFields.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMonitoringObjectWithAdditionalFields_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMonitoringObjectWithAdditionalFields_argsStandardScheme getScheme() {
        return new createMonitoringObjectWithAdditionalFields_argsStandardScheme();
      }
    }

    private static class createMonitoringObjectWithAdditionalFields_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMonitoringObjectWithAdditionalFields_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMonitoringObjectWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentGroupId = iprot.readString();
                struct.setParentGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRACKER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tracker = new Tracker();
                struct.tracker.read(iprot);
                struct.setTrackerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DISPLAY_COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.displayColor = iprot.readString();
                struct.setDisplayColorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DISPLAY_ICON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.displayIcon = iprot.readString();
                struct.setDisplayIconIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ADDITIONAL_FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.additionalFields = new AdditionalFields();
                struct.additionalFields.read(iprot);
                struct.setAdditionalFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMonitoringObjectWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parentGroupId != null) {
          oprot.writeFieldBegin(PARENT_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.parentGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.tracker != null) {
          oprot.writeFieldBegin(TRACKER_FIELD_DESC);
          struct.tracker.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.displayColor != null) {
          oprot.writeFieldBegin(DISPLAY_COLOR_FIELD_DESC);
          oprot.writeString(struct.displayColor);
          oprot.writeFieldEnd();
        }
        if (struct.displayIcon != null) {
          oprot.writeFieldBegin(DISPLAY_ICON_FIELD_DESC);
          oprot.writeString(struct.displayIcon);
          oprot.writeFieldEnd();
        }
        if (struct.additionalFields != null) {
          oprot.writeFieldBegin(ADDITIONAL_FIELDS_FIELD_DESC);
          struct.additionalFields.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMonitoringObjectWithAdditionalFields_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMonitoringObjectWithAdditionalFields_argsTupleScheme getScheme() {
        return new createMonitoringObjectWithAdditionalFields_argsTupleScheme();
      }
    }

    private static class createMonitoringObjectWithAdditionalFields_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMonitoringObjectWithAdditionalFields_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMonitoringObjectWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetParentGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetTracker()) {
          optionals.set(2);
        }
        if (struct.isSetName()) {
          optionals.set(3);
        }
        if (struct.isSetDisplayColor()) {
          optionals.set(4);
        }
        if (struct.isSetDisplayIcon()) {
          optionals.set(5);
        }
        if (struct.isSetAdditionalFields()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
        if (struct.isSetParentGroupId()) {
          oprot.writeString(struct.parentGroupId);
        }
        if (struct.isSetTracker()) {
          struct.tracker.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetDisplayColor()) {
          oprot.writeString(struct.displayColor);
        }
        if (struct.isSetDisplayIcon()) {
          oprot.writeString(struct.displayIcon);
        }
        if (struct.isSetAdditionalFields()) {
          struct.additionalFields.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMonitoringObjectWithAdditionalFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentGroupId = iprot.readString();
          struct.setParentGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tracker = new Tracker();
          struct.tracker.read(iprot);
          struct.setTrackerIsSet(true);
        }
        if (incoming.get(3)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.displayColor = iprot.readString();
          struct.setDisplayColorIsSet(true);
        }
        if (incoming.get(5)) {
          struct.displayIcon = iprot.readString();
          struct.setDisplayIconIsSet(true);
        }
        if (incoming.get(6)) {
          struct.additionalFields = new AdditionalFields();
          struct.additionalFields.read(iprot);
          struct.setAdditionalFieldsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createMonitoringObjectWithAdditionalFields_result implements org.apache.thrift.TBase<createMonitoringObjectWithAdditionalFields_result, createMonitoringObjectWithAdditionalFields_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMonitoringObjectWithAdditionalFields_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMonitoringObjectWithAdditionalFields_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createMonitoringObjectWithAdditionalFields_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createMonitoringObjectWithAdditionalFields_resultTupleSchemeFactory();

    public MonitoringObject success; // required
    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ad; // required
    public ObjectNotFound one; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      AD((short)5, "ad"),
      ONE((short)6, "one");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // AD
            return AD;
          case 6: // ONE
            return ONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonitoringObject.class)));
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMonitoringObjectWithAdditionalFields_result.class, metaDataMap);
    }

    public createMonitoringObjectWithAdditionalFields_result() {
    }

    public createMonitoringObjectWithAdditionalFields_result(
      MonitoringObject success,
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ad,
      ObjectNotFound one)
    {
      this();
      this.success = success;
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ad = ad;
      this.one = one;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMonitoringObjectWithAdditionalFields_result(createMonitoringObjectWithAdditionalFields_result other) {
      if (other.isSetSuccess()) {
        this.success = new MonitoringObject(other.success);
      }
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAd()) {
        this.ad = new AccessDenied(other.ad);
      }
      if (other.isSetOne()) {
        this.one = new ObjectNotFound(other.one);
      }
    }

    public createMonitoringObjectWithAdditionalFields_result deepCopy() {
      return new createMonitoringObjectWithAdditionalFields_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ad = null;
      this.one = null;
    }

    public MonitoringObject getSuccess() {
      return this.success;
    }

    public createMonitoringObjectWithAdditionalFields_result setSuccess(MonitoringObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public createMonitoringObjectWithAdditionalFields_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public createMonitoringObjectWithAdditionalFields_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public createMonitoringObjectWithAdditionalFields_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public createMonitoringObjectWithAdditionalFields_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAd() {
      return this.ad;
    }

    public createMonitoringObjectWithAdditionalFields_result setAd(AccessDenied ad) {
      this.ad = ad;
      return this;
    }

    public void unsetAd() {
      this.ad = null;
    }

    /** Returns true if field ad is set (has been assigned a value) and false otherwise */
    public boolean isSetAd() {
      return this.ad != null;
    }

    public void setAdIsSet(boolean value) {
      if (!value) {
        this.ad = null;
      }
    }

    public ObjectNotFound getOne() {
      return this.one;
    }

    public createMonitoringObjectWithAdditionalFields_result setOne(ObjectNotFound one) {
      this.one = one;
      return this;
    }

    public void unsetOne() {
      this.one = null;
    }

    /** Returns true if field one is set (has been assigned a value) and false otherwise */
    public boolean isSetOne() {
      return this.one != null;
    }

    public void setOneIsSet(boolean value) {
      if (!value) {
        this.one = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MonitoringObject)value);
        }
        break;

      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case AD:
        if (value == null) {
          unsetAd();
        } else {
          setAd((AccessDenied)value);
        }
        break;

      case ONE:
        if (value == null) {
          unsetOne();
        } else {
          setOne((ObjectNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case AD:
        return getAd();

      case ONE:
        return getOne();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case AD:
        return isSetAd();
      case ONE:
        return isSetOne();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createMonitoringObjectWithAdditionalFields_result)
        return this.equals((createMonitoringObjectWithAdditionalFields_result)that);
      return false;
    }

    public boolean equals(createMonitoringObjectWithAdditionalFields_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ad = true && this.isSetAd();
      boolean that_present_ad = true && that.isSetAd();
      if (this_present_ad || that_present_ad) {
        if (!(this_present_ad && that_present_ad))
          return false;
        if (!this.ad.equals(that.ad))
          return false;
      }

      boolean this_present_one = true && this.isSetOne();
      boolean that_present_one = true && that.isSetOne();
      if (this_present_one || that_present_one) {
        if (!(this_present_one && that_present_one))
          return false;
        if (!this.one.equals(that.one))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAd()) ? 131071 : 524287);
      if (isSetAd())
        hashCode = hashCode * 8191 + ad.hashCode();

      hashCode = hashCode * 8191 + ((isSetOne()) ? 131071 : 524287);
      if (isSetOne())
        hashCode = hashCode * 8191 + one.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createMonitoringObjectWithAdditionalFields_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAd()).compareTo(other.isSetAd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, other.ad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOne()).compareTo(other.isSetOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, other.one);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createMonitoringObjectWithAdditionalFields_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ad:");
      if (this.ad == null) {
        sb.append("null");
      } else {
        sb.append(this.ad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("one:");
      if (this.one == null) {
        sb.append("null");
      } else {
        sb.append(this.one);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMonitoringObjectWithAdditionalFields_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMonitoringObjectWithAdditionalFields_resultStandardScheme getScheme() {
        return new createMonitoringObjectWithAdditionalFields_resultStandardScheme();
      }
    }

    private static class createMonitoringObjectWithAdditionalFields_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createMonitoringObjectWithAdditionalFields_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMonitoringObjectWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MonitoringObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // AD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ad = new AccessDenied();
                struct.ad.read(iprot);
                struct.setAdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.one = new ObjectNotFound();
                struct.one.read(iprot);
                struct.setOneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMonitoringObjectWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ad != null) {
          oprot.writeFieldBegin(AD_FIELD_DESC);
          struct.ad.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.one != null) {
          oprot.writeFieldBegin(ONE_FIELD_DESC);
          struct.one.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMonitoringObjectWithAdditionalFields_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createMonitoringObjectWithAdditionalFields_resultTupleScheme getScheme() {
        return new createMonitoringObjectWithAdditionalFields_resultTupleScheme();
      }
    }

    private static class createMonitoringObjectWithAdditionalFields_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createMonitoringObjectWithAdditionalFields_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMonitoringObjectWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBre()) {
          optionals.set(1);
        }
        if (struct.isSetBse()) {
          optionals.set(2);
        }
        if (struct.isSetIse()) {
          optionals.set(3);
        }
        if (struct.isSetUe()) {
          optionals.set(4);
        }
        if (struct.isSetAd()) {
          optionals.set(5);
        }
        if (struct.isSetOne()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAd()) {
          struct.ad.write(oprot);
        }
        if (struct.isSetOne()) {
          struct.one.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMonitoringObjectWithAdditionalFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new MonitoringObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ad = new AccessDenied();
          struct.ad.read(iprot);
          struct.setAdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.one = new ObjectNotFound();
          struct.one.read(iprot);
          struct.setOneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class editMonitoringObject_args implements org.apache.thrift.TBase<editMonitoringObject_args, editMonitoringObject_args._Fields>, java.io.Serializable, Cloneable, Comparable<editMonitoringObject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMonitoringObject_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new editMonitoringObject_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new editMonitoringObject_argsTupleSchemeFactory();

    public Session session; // required
    public MonitoringObject data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      DATA((short)2, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonitoringObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMonitoringObject_args.class, metaDataMap);
    }

    public editMonitoringObject_args() {
    }

    public editMonitoringObject_args(
      Session session,
      MonitoringObject data)
    {
      this();
      this.session = session;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMonitoringObject_args(editMonitoringObject_args other) {
      if (other.isSetSession()) {
        this.session = new Session(other.session);
      }
      if (other.isSetData()) {
        this.data = new MonitoringObject(other.data);
      }
    }

    public editMonitoringObject_args deepCopy() {
      return new editMonitoringObject_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.data = null;
    }

    public Session getSession() {
      return this.session;
    }

    public editMonitoringObject_args setSession(Session session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public MonitoringObject getData() {
      return this.data;
    }

    public editMonitoringObject_args setData(MonitoringObject data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((Session)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((MonitoringObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof editMonitoringObject_args)
        return this.equals((editMonitoringObject_args)that);
      return false;
    }

    public boolean equals(editMonitoringObject_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(editMonitoringObject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("editMonitoringObject_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
      if (data != null) {
        data.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMonitoringObject_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editMonitoringObject_argsStandardScheme getScheme() {
        return new editMonitoringObject_argsStandardScheme();
      }
    }

    private static class editMonitoringObject_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<editMonitoringObject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMonitoringObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new Session();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new MonitoringObject();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMonitoringObject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMonitoringObject_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editMonitoringObject_argsTupleScheme getScheme() {
        return new editMonitoringObject_argsTupleScheme();
      }
    }

    private static class editMonitoringObject_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<editMonitoringObject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMonitoringObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMonitoringObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.session = new Session();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = new MonitoringObject();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class editMonitoringObject_result implements org.apache.thrift.TBase<editMonitoringObject_result, editMonitoringObject_result._Fields>, java.io.Serializable, Cloneable, Comparable<editMonitoringObject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editMonitoringObject_result");

    private static final org.apache.thrift.protocol.TField BRE_FIELD_DESC = new org.apache.thrift.protocol.TField("bre", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BSE_FIELD_DESC = new org.apache.thrift.protocol.TField("bse", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ade", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("one", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new editMonitoringObject_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new editMonitoringObject_resultTupleSchemeFactory();

    public BadRequest bre; // required
    public Busy bse; // required
    public InternalServerError ise; // required
    public Unauthorized ue; // required
    public AccessDenied ade; // required
    public ObjectNotFound one; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRE((short)1, "bre"),
      BSE((short)2, "bse"),
      ISE((short)3, "ise"),
      UE((short)4, "ue"),
      ADE((short)5, "ade"),
      ONE((short)6, "one");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRE
            return BRE;
          case 2: // BSE
            return BSE;
          case 3: // ISE
            return ISE;
          case 4: // UE
            return UE;
          case 5: // ADE
            return ADE;
          case 6: // ONE
            return ONE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRE, new org.apache.thrift.meta_data.FieldMetaData("bre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadRequest.class)));
      tmpMap.put(_Fields.BSE, new org.apache.thrift.meta_data.FieldMetaData("bse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Busy.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalServerError.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unauthorized.class)));
      tmpMap.put(_Fields.ADE, new org.apache.thrift.meta_data.FieldMetaData("ade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessDenied.class)));
      tmpMap.put(_Fields.ONE, new org.apache.thrift.meta_data.FieldMetaData("one", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObjectNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editMonitoringObject_result.class, metaDataMap);
    }

    public editMonitoringObject_result() {
    }

    public editMonitoringObject_result(
      BadRequest bre,
      Busy bse,
      InternalServerError ise,
      Unauthorized ue,
      AccessDenied ade,
      ObjectNotFound one)
    {
      this();
      this.bre = bre;
      this.bse = bse;
      this.ise = ise;
      this.ue = ue;
      this.ade = ade;
      this.one = one;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editMonitoringObject_result(editMonitoringObject_result other) {
      if (other.isSetBre()) {
        this.bre = new BadRequest(other.bre);
      }
      if (other.isSetBse()) {
        this.bse = new Busy(other.bse);
      }
      if (other.isSetIse()) {
        this.ise = new InternalServerError(other.ise);
      }
      if (other.isSetUe()) {
        this.ue = new Unauthorized(other.ue);
      }
      if (other.isSetAde()) {
        this.ade = new AccessDenied(other.ade);
      }
      if (other.isSetOne()) {
        this.one = new ObjectNotFound(other.one);
      }
    }

    public editMonitoringObject_result deepCopy() {
      return new editMonitoringObject_result(this);
    }

    @Override
    public void clear() {
      this.bre = null;
      this.bse = null;
      this.ise = null;
      this.ue = null;
      this.ade = null;
      this.one = null;
    }

    public BadRequest getBre() {
      return this.bre;
    }

    public editMonitoringObject_result setBre(BadRequest bre) {
      this.bre = bre;
      return this;
    }

    public void unsetBre() {
      this.bre = null;
    }

    /** Returns true if field bre is set (has been assigned a value) and false otherwise */
    public boolean isSetBre() {
      return this.bre != null;
    }

    public void setBreIsSet(boolean value) {
      if (!value) {
        this.bre = null;
      }
    }

    public Busy getBse() {
      return this.bse;
    }

    public editMonitoringObject_result setBse(Busy bse) {
      this.bse = bse;
      return this;
    }

    public void unsetBse() {
      this.bse = null;
    }

    /** Returns true if field bse is set (has been assigned a value) and false otherwise */
    public boolean isSetBse() {
      return this.bse != null;
    }

    public void setBseIsSet(boolean value) {
      if (!value) {
        this.bse = null;
      }
    }

    public InternalServerError getIse() {
      return this.ise;
    }

    public editMonitoringObject_result setIse(InternalServerError ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public Unauthorized getUe() {
      return this.ue;
    }

    public editMonitoringObject_result setUe(Unauthorized ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public AccessDenied getAde() {
      return this.ade;
    }

    public editMonitoringObject_result setAde(AccessDenied ade) {
      this.ade = ade;
      return this;
    }

    public void unsetAde() {
      this.ade = null;
    }

    /** Returns true if field ade is set (has been assigned a value) and false otherwise */
    public boolean isSetAde() {
      return this.ade != null;
    }

    public void setAdeIsSet(boolean value) {
      if (!value) {
        this.ade = null;
      }
    }

    public ObjectNotFound getOne() {
      return this.one;
    }

    public editMonitoringObject_result setOne(ObjectNotFound one) {
      this.one = one;
      return this;
    }

    public void unsetOne() {
      this.one = null;
    }

    /** Returns true if field one is set (has been assigned a value) and false otherwise */
    public boolean isSetOne() {
      return this.one != null;
    }

    public void setOneIsSet(boolean value) {
      if (!value) {
        this.one = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BRE:
        if (value == null) {
          unsetBre();
        } else {
          setBre((BadRequest)value);
        }
        break;

      case BSE:
        if (value == null) {
          unsetBse();
        } else {
          setBse((Busy)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((InternalServerError)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((Unauthorized)value);
        }
        break;

      case ADE:
        if (value == null) {
          unsetAde();
        } else {
          setAde((AccessDenied)value);
        }
        break;

      case ONE:
        if (value == null) {
          unsetOne();
        } else {
          setOne((ObjectNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BRE:
        return getBre();

      case BSE:
        return getBse();

      case ISE:
        return getIse();

      case UE:
        return getUe();

      case ADE:
        return getAde();

      case ONE:
        return getOne();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BRE:
        return isSetBre();
      case BSE:
        return isSetBse();
      case ISE:
        return isSetIse();
      case UE:
        return isSetUe();
      case ADE:
        return isSetAde();
      case ONE:
        return isSetOne();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof editMonitoringObject_result)
        return this.equals((editMonitoringObject_result)that);
      return false;
    }

    public boolean equals(editMonitoringObject_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bre = true && this.isSetBre();
      boolean that_present_bre = true && that.isSetBre();
      if (this_present_bre || that_present_bre) {
        if (!(this_present_bre && that_present_bre))
          return false;
        if (!this.bre.equals(that.bre))
          return false;
      }

      boolean this_present_bse = true && this.isSetBse();
      boolean that_present_bse = true && that.isSetBse();
      if (this_present_bse || that_present_bse) {
        if (!(this_present_bse && that_present_bse))
          return false;
        if (!this.bse.equals(that.bse))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_ade = true && this.isSetAde();
      boolean that_present_ade = true && that.isSetAde();
      if (this_present_ade || that_present_ade) {
        if (!(this_present_ade && that_present_ade))
          return false;
        if (!this.ade.equals(that.ade))
          return false;
      }

      boolean this_present_one = true && this.isSetOne();
      boolean that_present_one = true && that.isSetOne();
      if (this_present_one || that_present_one) {
        if (!(this_present_one && that_present_one))
          return false;
        if (!this.one.equals(that.one))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBre()) ? 131071 : 524287);
      if (isSetBre())
        hashCode = hashCode * 8191 + bre.hashCode();

      hashCode = hashCode * 8191 + ((isSetBse()) ? 131071 : 524287);
      if (isSetBse())
        hashCode = hashCode * 8191 + bse.hashCode();

      hashCode = hashCode * 8191 + ((isSetIse()) ? 131071 : 524287);
      if (isSetIse())
        hashCode = hashCode * 8191 + ise.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetAde()) ? 131071 : 524287);
      if (isSetAde())
        hashCode = hashCode * 8191 + ade.hashCode();

      hashCode = hashCode * 8191 + ((isSetOne()) ? 131071 : 524287);
      if (isSetOne())
        hashCode = hashCode * 8191 + one.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(editMonitoringObject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBre()).compareTo(other.isSetBre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bre, other.bre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBse()).compareTo(other.isSetBse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bse, other.bse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIse()).compareTo(other.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, other.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAde()).compareTo(other.isSetAde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ade, other.ade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOne()).compareTo(other.isSetOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.one, other.one);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("editMonitoringObject_result(");
      boolean first = true;

      sb.append("bre:");
      if (this.bre == null) {
        sb.append("null");
      } else {
        sb.append(this.bre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bse:");
      if (this.bse == null) {
        sb.append("null");
      } else {
        sb.append(this.bse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ade:");
      if (this.ade == null) {
        sb.append("null");
      } else {
        sb.append(this.ade);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("one:");
      if (this.one == null) {
        sb.append("null");
      } else {
        sb.append(this.one);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editMonitoringObject_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editMonitoringObject_resultStandardScheme getScheme() {
        return new editMonitoringObject_resultStandardScheme();
      }
    }

    private static class editMonitoringObject_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<editMonitoringObject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editMonitoringObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bre = new BadRequest();
                struct.bre.read(iprot);
                struct.setBreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bse = new Busy();
                struct.bse.read(iprot);
                struct.setBseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new InternalServerError();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new Unauthorized();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ADE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ade = new AccessDenied();
                struct.ade.read(iprot);
                struct.setAdeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.one = new ObjectNotFound();
                struct.one.read(iprot);
                struct.setOneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editMonitoringObject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bre != null) {
          oprot.writeFieldBegin(BRE_FIELD_DESC);
          struct.bre.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bse != null) {
          oprot.writeFieldBegin(BSE_FIELD_DESC);
          struct.bse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ade != null) {
          oprot.writeFieldBegin(ADE_FIELD_DESC);
          struct.ade.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.one != null) {
          oprot.writeFieldBegin(ONE_FIELD_DESC);
          struct.one.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editMonitoringObject_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public editMonitoringObject_resultTupleScheme getScheme() {
        return new editMonitoringObject_resultTupleScheme();
      }
    }

    private static class editMonitoringObject_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<editMonitoringObject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editMonitoringObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBre()) {
          optionals.set(0);
        }
        if (struct.isSetBse()) {
          optionals.set(1);
        }
        if (struct.isSetIse()) {
          optionals.set(2);
        }
        if (struct.isSetUe()) {
          optionals.set(3);
        }
        if (struct.isSetAde()) {
          optionals.set(4);
        }
        if (struct.isSetOne()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBre()) {
          struct.bre.write(oprot);
        }
        if (struct.isSetBse()) {
          struct.bse.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetAde()) {
          struct.ade.write(oprot);
        }
        if (struct.isSetOne()) {
          struct.one.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editMonitoringObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bre = new BadRequest();
          struct.bre.read(iprot);
          struct.setBreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bse = new Busy();
          struct.bse.read(iprot);
          struct.setBseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ise = new InternalServerError();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ue = new Unauthorized();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ade = new AccessDenied();
          struct.ade.read(iprot);
          struct.setAdeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.one = new ObjectNotFound();
          struct.one.read(iprot);
          struct.setOneIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
