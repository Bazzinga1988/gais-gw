/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dispatch.server.thrift.backend;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-05-18")
public class Group implements org.apache.thrift.TBase<Group, Group._Fields>, java.io.Serializable, Cloneable, Comparable<Group> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Group");

  private static final org.apache.thrift.protocol.TField PARENT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalFields", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GroupStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GroupTupleSchemeFactory();

  public java.lang.String parentGroupId; // required
  public java.lang.String id; // required
  public java.lang.String title; // required
  public License license; // optional
  public AdditionalFields additionalFields; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_GROUP_ID((short)1, "parentGroupId"),
    ID((short)2, "id"),
    TITLE((short)3, "title"),
    LICENSE((short)4, "license"),
    ADDITIONAL_FIELDS((short)5, "additionalFields");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_GROUP_ID
          return PARENT_GROUP_ID;
        case 2: // ID
          return ID;
        case 3: // TITLE
          return TITLE;
        case 4: // LICENSE
          return LICENSE;
        case 5: // ADDITIONAL_FIELDS
          return ADDITIONAL_FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LICENSE,_Fields.ADDITIONAL_FIELDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("parentGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, License.class)));
    tmpMap.put(_Fields.ADDITIONAL_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("additionalFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalFields.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Group.class, metaDataMap);
  }

  public Group() {
  }

  public Group(
    java.lang.String parentGroupId,
    java.lang.String id,
    java.lang.String title)
  {
    this();
    this.parentGroupId = parentGroupId;
    this.id = id;
    this.title = title;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Group(Group other) {
    if (other.isSetParentGroupId()) {
      this.parentGroupId = other.parentGroupId;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetLicense()) {
      this.license = new License(other.license);
    }
    if (other.isSetAdditionalFields()) {
      this.additionalFields = new AdditionalFields(other.additionalFields);
    }
  }

  public Group deepCopy() {
    return new Group(this);
  }

  @Override
  public void clear() {
    this.parentGroupId = null;
    this.id = null;
    this.title = null;
    this.license = null;
    this.additionalFields = null;
  }

  public java.lang.String getParentGroupId() {
    return this.parentGroupId;
  }

  public Group setParentGroupId(java.lang.String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

  public void unsetParentGroupId() {
    this.parentGroupId = null;
  }

  /** Returns true if field parentGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentGroupId() {
    return this.parentGroupId != null;
  }

  public void setParentGroupIdIsSet(boolean value) {
    if (!value) {
      this.parentGroupId = null;
    }
  }

  public java.lang.String getId() {
    return this.id;
  }

  public Group setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public Group setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public License getLicense() {
    return this.license;
  }

  public Group setLicense(License license) {
    this.license = license;
    return this;
  }

  public void unsetLicense() {
    this.license = null;
  }

  /** Returns true if field license is set (has been assigned a value) and false otherwise */
  public boolean isSetLicense() {
    return this.license != null;
  }

  public void setLicenseIsSet(boolean value) {
    if (!value) {
      this.license = null;
    }
  }

  public AdditionalFields getAdditionalFields() {
    return this.additionalFields;
  }

  public Group setAdditionalFields(AdditionalFields additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  public void unsetAdditionalFields() {
    this.additionalFields = null;
  }

  /** Returns true if field additionalFields is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionalFields() {
    return this.additionalFields != null;
  }

  public void setAdditionalFieldsIsSet(boolean value) {
    if (!value) {
      this.additionalFields = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PARENT_GROUP_ID:
      if (value == null) {
        unsetParentGroupId();
      } else {
        setParentGroupId((java.lang.String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case LICENSE:
      if (value == null) {
        unsetLicense();
      } else {
        setLicense((License)value);
      }
      break;

    case ADDITIONAL_FIELDS:
      if (value == null) {
        unsetAdditionalFields();
      } else {
        setAdditionalFields((AdditionalFields)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_GROUP_ID:
      return getParentGroupId();

    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case LICENSE:
      return getLicense();

    case ADDITIONAL_FIELDS:
      return getAdditionalFields();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARENT_GROUP_ID:
      return isSetParentGroupId();
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case LICENSE:
      return isSetLicense();
    case ADDITIONAL_FIELDS:
      return isSetAdditionalFields();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Group)
      return this.equals((Group)that);
    return false;
  }

  public boolean equals(Group that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parentGroupId = true && this.isSetParentGroupId();
    boolean that_present_parentGroupId = true && that.isSetParentGroupId();
    if (this_present_parentGroupId || that_present_parentGroupId) {
      if (!(this_present_parentGroupId && that_present_parentGroupId))
        return false;
      if (!this.parentGroupId.equals(that.parentGroupId))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_license = true && this.isSetLicense();
    boolean that_present_license = true && that.isSetLicense();
    if (this_present_license || that_present_license) {
      if (!(this_present_license && that_present_license))
        return false;
      if (!this.license.equals(that.license))
        return false;
    }

    boolean this_present_additionalFields = true && this.isSetAdditionalFields();
    boolean that_present_additionalFields = true && that.isSetAdditionalFields();
    if (this_present_additionalFields || that_present_additionalFields) {
      if (!(this_present_additionalFields && that_present_additionalFields))
        return false;
      if (!this.additionalFields.equals(that.additionalFields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParentGroupId()) ? 131071 : 524287);
    if (isSetParentGroupId())
      hashCode = hashCode * 8191 + parentGroupId.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetLicense()) ? 131071 : 524287);
    if (isSetLicense())
      hashCode = hashCode * 8191 + license.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdditionalFields()) ? 131071 : 524287);
    if (isSetAdditionalFields())
      hashCode = hashCode * 8191 + additionalFields.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Group other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetParentGroupId()).compareTo(other.isSetParentGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentGroupId, other.parentGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdditionalFields()).compareTo(other.isSetAdditionalFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionalFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalFields, other.additionalFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Group(");
    boolean first = true;

    sb.append("parentGroupId:");
    if (this.parentGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (isSetLicense()) {
      if (!first) sb.append(", ");
      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
    }
    if (isSetAdditionalFields()) {
      if (!first) sb.append(", ");
      sb.append("additionalFields:");
      if (this.additionalFields == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalFields);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (license != null) {
      license.validate();
    }
    if (additionalFields != null) {
      additionalFields.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GroupStandardScheme getScheme() {
      return new GroupStandardScheme();
    }
  }

  private static class GroupStandardScheme extends org.apache.thrift.scheme.StandardScheme<Group> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Group struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentGroupId = iprot.readString();
              struct.setParentGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LICENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.license = new License();
              struct.license.read(iprot);
              struct.setLicenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDITIONAL_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.additionalFields = new AdditionalFields();
              struct.additionalFields.read(iprot);
              struct.setAdditionalFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Group struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parentGroupId != null) {
        oprot.writeFieldBegin(PARENT_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.parentGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.license != null) {
        if (struct.isSetLicense()) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          struct.license.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.additionalFields != null) {
        if (struct.isSetAdditionalFields()) {
          oprot.writeFieldBegin(ADDITIONAL_FIELDS_FIELD_DESC);
          struct.additionalFields.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GroupTupleScheme getScheme() {
      return new GroupTupleScheme();
    }
  }

  private static class GroupTupleScheme extends org.apache.thrift.scheme.TupleScheme<Group> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Group struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParentGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetLicense()) {
        optionals.set(3);
      }
      if (struct.isSetAdditionalFields()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetParentGroupId()) {
        oprot.writeString(struct.parentGroupId);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetLicense()) {
        struct.license.write(oprot);
      }
      if (struct.isSetAdditionalFields()) {
        struct.additionalFields.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Group struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.parentGroupId = iprot.readString();
        struct.setParentGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.license = new License();
        struct.license.read(iprot);
        struct.setLicenseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.additionalFields = new AdditionalFields();
        struct.additionalFields.read(iprot);
        struct.setAdditionalFieldsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

